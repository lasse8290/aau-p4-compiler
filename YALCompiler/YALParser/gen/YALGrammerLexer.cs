//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/Documents/GitHub/aau-p4-compiler/YALCompiler/YALParser/Gammar\YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, ARRAY_DEFINER=37, ASYNC=38, 
		AWAIT=39, RETURN=40, TYPE=41, ENUM=42, IN=43, OUT=44, STRING=45, ID=46, 
		NUMBER=47, BOOLEAN=48, WHITESPACE=49, NEWLINE=50, COMMENT=51, LINE_COMMENT=52;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "LOWERCASE", "UPPERCASE", "DIGIT", "LETTER", 
		"DOUBLE_QUOTATION_MARK", "SINGLE_QUOTATION_MARK", "ARRAY_DEFINER", "ASYNC", 
		"AWAIT", "RETURN", "TYPE", "ENUM", "IN", "OUT", "STRING", "ID", "NUMBER", 
		"BOOLEAN", "WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "'('", "','", "')'", "'{'", "';'", "'}'", "'='", "'+='", 
		"'-='", "'++'", "'--'", "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", "'>>'", 
		"'&'", "'^'", "'|'", "'!'", "'&&'", "'||'", "'<'", "'<='", "'>'", "'>='", 
		"'=='", "'!='", "'if'", "'else if'", "'else'", "'while'", "'for'", null, 
		"'async'", "'await'", "'return'", null, "'enum'", "'in'", "'out'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "ARRAY_DEFINER", "ASYNC", "AWAIT", "RETURN", "TYPE", "ENUM", "IN", 
		"OUT", "STRING", "ID", "NUMBER", "BOOLEAN", "WHITESPACE", "NEWLINE", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,52,433,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
		1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
		1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
		1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,
		1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
		1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,
		1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,3,39,226,8,39,1,40,1,40,1,41,1,
		41,1,42,1,42,3,42,234,8,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,
		1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
		1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,327,8,
		46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,50,1,
		50,1,50,1,50,5,50,345,8,50,10,50,12,50,348,9,50,1,50,1,50,1,50,1,50,1,
		50,1,50,5,50,356,8,50,10,50,12,50,359,9,50,1,50,1,50,3,50,363,8,50,1,51,
		1,51,1,51,5,51,368,8,51,10,51,12,51,371,9,51,1,52,1,52,5,52,375,8,52,10,
		52,12,52,378,9,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,389,
		8,53,1,54,4,54,392,8,54,11,54,12,54,393,1,54,1,54,1,55,3,55,399,8,55,1,
		55,1,55,4,55,403,8,55,11,55,12,55,404,1,55,1,55,1,56,1,56,1,56,1,56,5,
		56,413,8,56,10,56,12,56,416,9,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,
		57,1,57,5,57,427,8,57,10,57,12,57,430,9,57,1,57,1,57,3,346,357,414,0,58,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
		53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,0,75,0,
		77,0,79,0,81,0,83,0,85,37,87,38,89,39,91,40,93,41,95,42,97,43,99,44,101,
		45,103,46,105,47,107,48,109,49,111,50,113,51,115,52,1,0,5,1,0,97,122,1,
		0,65,90,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,455,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,1,117,1,0,0,0,3,119,1,0,0,0,5,121,1,0,0,0,7,
		123,1,0,0,0,9,125,1,0,0,0,11,127,1,0,0,0,13,129,1,0,0,0,15,131,1,0,0,0,
		17,133,1,0,0,0,19,136,1,0,0,0,21,139,1,0,0,0,23,142,1,0,0,0,25,145,1,0,
		0,0,27,147,1,0,0,0,29,149,1,0,0,0,31,151,1,0,0,0,33,153,1,0,0,0,35,155,
		1,0,0,0,37,158,1,0,0,0,39,161,1,0,0,0,41,163,1,0,0,0,43,165,1,0,0,0,45,
		167,1,0,0,0,47,169,1,0,0,0,49,172,1,0,0,0,51,175,1,0,0,0,53,177,1,0,0,
		0,55,180,1,0,0,0,57,182,1,0,0,0,59,185,1,0,0,0,61,188,1,0,0,0,63,191,1,
		0,0,0,65,194,1,0,0,0,67,202,1,0,0,0,69,207,1,0,0,0,71,213,1,0,0,0,73,217,
		1,0,0,0,75,219,1,0,0,0,77,221,1,0,0,0,79,225,1,0,0,0,81,227,1,0,0,0,83,
		229,1,0,0,0,85,231,1,0,0,0,87,237,1,0,0,0,89,243,1,0,0,0,91,249,1,0,0,
		0,93,326,1,0,0,0,95,328,1,0,0,0,97,333,1,0,0,0,99,336,1,0,0,0,101,362,
		1,0,0,0,103,364,1,0,0,0,105,372,1,0,0,0,107,388,1,0,0,0,109,391,1,0,0,
		0,111,402,1,0,0,0,113,408,1,0,0,0,115,422,1,0,0,0,117,118,5,58,0,0,118,
		2,1,0,0,0,119,120,5,40,0,0,120,4,1,0,0,0,121,122,5,44,0,0,122,6,1,0,0,
		0,123,124,5,41,0,0,124,8,1,0,0,0,125,126,5,123,0,0,126,10,1,0,0,0,127,
		128,5,59,0,0,128,12,1,0,0,0,129,130,5,125,0,0,130,14,1,0,0,0,131,132,5,
		61,0,0,132,16,1,0,0,0,133,134,5,43,0,0,134,135,5,61,0,0,135,18,1,0,0,0,
		136,137,5,45,0,0,137,138,5,61,0,0,138,20,1,0,0,0,139,140,5,43,0,0,140,
		141,5,43,0,0,141,22,1,0,0,0,142,143,5,45,0,0,143,144,5,45,0,0,144,24,1,
		0,0,0,145,146,5,42,0,0,146,26,1,0,0,0,147,148,5,47,0,0,148,28,1,0,0,0,
		149,150,5,37,0,0,150,30,1,0,0,0,151,152,5,43,0,0,152,32,1,0,0,0,153,154,
		5,45,0,0,154,34,1,0,0,0,155,156,5,60,0,0,156,157,5,60,0,0,157,36,1,0,0,
		0,158,159,5,62,0,0,159,160,5,62,0,0,160,38,1,0,0,0,161,162,5,38,0,0,162,
		40,1,0,0,0,163,164,5,94,0,0,164,42,1,0,0,0,165,166,5,124,0,0,166,44,1,
		0,0,0,167,168,5,33,0,0,168,46,1,0,0,0,169,170,5,38,0,0,170,171,5,38,0,
		0,171,48,1,0,0,0,172,173,5,124,0,0,173,174,5,124,0,0,174,50,1,0,0,0,175,
		176,5,60,0,0,176,52,1,0,0,0,177,178,5,60,0,0,178,179,5,61,0,0,179,54,1,
		0,0,0,180,181,5,62,0,0,181,56,1,0,0,0,182,183,5,62,0,0,183,184,5,61,0,
		0,184,58,1,0,0,0,185,186,5,61,0,0,186,187,5,61,0,0,187,60,1,0,0,0,188,
		189,5,33,0,0,189,190,5,61,0,0,190,62,1,0,0,0,191,192,5,105,0,0,192,193,
		5,102,0,0,193,64,1,0,0,0,194,195,5,101,0,0,195,196,5,108,0,0,196,197,5,
		115,0,0,197,198,5,101,0,0,198,199,5,32,0,0,199,200,5,105,0,0,200,201,5,
		102,0,0,201,66,1,0,0,0,202,203,5,101,0,0,203,204,5,108,0,0,204,205,5,115,
		0,0,205,206,5,101,0,0,206,68,1,0,0,0,207,208,5,119,0,0,208,209,5,104,0,
		0,209,210,5,105,0,0,210,211,5,108,0,0,211,212,5,101,0,0,212,70,1,0,0,0,
		213,214,5,102,0,0,214,215,5,111,0,0,215,216,5,114,0,0,216,72,1,0,0,0,217,
		218,7,0,0,0,218,74,1,0,0,0,219,220,7,1,0,0,220,76,1,0,0,0,221,222,7,2,
		0,0,222,78,1,0,0,0,223,226,3,73,36,0,224,226,3,75,37,0,225,223,1,0,0,0,
		225,224,1,0,0,0,226,80,1,0,0,0,227,228,5,34,0,0,228,82,1,0,0,0,229,230,
		5,39,0,0,230,84,1,0,0,0,231,233,5,91,0,0,232,234,3,105,52,0,233,232,1,
		0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,236,5,93,0,0,236,86,1,0,0,0,
		237,238,5,97,0,0,238,239,5,115,0,0,239,240,5,121,0,0,240,241,5,110,0,0,
		241,242,5,99,0,0,242,88,1,0,0,0,243,244,5,97,0,0,244,245,5,119,0,0,245,
		246,5,97,0,0,246,247,5,105,0,0,247,248,5,116,0,0,248,90,1,0,0,0,249,250,
		5,114,0,0,250,251,5,101,0,0,251,252,5,116,0,0,252,253,5,117,0,0,253,254,
		5,114,0,0,254,255,5,110,0,0,255,92,1,0,0,0,256,257,5,105,0,0,257,258,5,
		110,0,0,258,259,5,116,0,0,259,327,5,56,0,0,260,261,5,105,0,0,261,262,5,
		110,0,0,262,263,5,116,0,0,263,264,5,49,0,0,264,327,5,54,0,0,265,266,5,
		105,0,0,266,267,5,110,0,0,267,268,5,116,0,0,268,269,5,51,0,0,269,327,5,
		50,0,0,270,271,5,105,0,0,271,272,5,110,0,0,272,273,5,116,0,0,273,274,5,
		54,0,0,274,327,5,52,0,0,275,276,5,117,0,0,276,277,5,105,0,0,277,278,5,
		110,0,0,278,279,5,116,0,0,279,327,5,56,0,0,280,281,5,117,0,0,281,282,5,
		105,0,0,282,283,5,110,0,0,283,284,5,116,0,0,284,285,5,49,0,0,285,327,5,
		54,0,0,286,287,5,117,0,0,287,288,5,105,0,0,288,289,5,110,0,0,289,290,5,
		116,0,0,290,291,5,51,0,0,291,327,5,50,0,0,292,293,5,117,0,0,293,294,5,
		105,0,0,294,295,5,110,0,0,295,296,5,116,0,0,296,297,5,54,0,0,297,327,5,
		52,0,0,298,299,5,102,0,0,299,300,5,108,0,0,300,301,5,111,0,0,301,302,5,
		97,0,0,302,303,5,116,0,0,303,304,5,51,0,0,304,327,5,50,0,0,305,306,5,102,
		0,0,306,307,5,108,0,0,307,308,5,111,0,0,308,309,5,97,0,0,309,310,5,116,
		0,0,310,311,5,54,0,0,311,327,5,52,0,0,312,313,5,99,0,0,313,314,5,104,0,
		0,314,315,5,97,0,0,315,327,5,114,0,0,316,317,5,115,0,0,317,318,5,116,0,
		0,318,319,5,114,0,0,319,320,5,105,0,0,320,321,5,110,0,0,321,327,5,103,
		0,0,322,323,5,98,0,0,323,324,5,111,0,0,324,325,5,111,0,0,325,327,5,108,
		0,0,326,256,1,0,0,0,326,260,1,0,0,0,326,265,1,0,0,0,326,270,1,0,0,0,326,
		275,1,0,0,0,326,280,1,0,0,0,326,286,1,0,0,0,326,292,1,0,0,0,326,298,1,
		0,0,0,326,305,1,0,0,0,326,312,1,0,0,0,326,316,1,0,0,0,326,322,1,0,0,0,
		327,94,1,0,0,0,328,329,5,101,0,0,329,330,5,110,0,0,330,331,5,117,0,0,331,
		332,5,109,0,0,332,96,1,0,0,0,333,334,5,105,0,0,334,335,5,110,0,0,335,98,
		1,0,0,0,336,337,5,111,0,0,337,338,5,117,0,0,338,339,5,116,0,0,339,100,
		1,0,0,0,340,346,3,83,41,0,341,342,5,92,0,0,342,345,3,83,41,0,343,345,9,
		0,0,0,344,341,1,0,0,0,344,343,1,0,0,0,345,348,1,0,0,0,346,347,1,0,0,0,
		346,344,1,0,0,0,347,349,1,0,0,0,348,346,1,0,0,0,349,350,3,83,41,0,350,
		363,1,0,0,0,351,357,3,81,40,0,352,353,5,92,0,0,353,356,3,81,40,0,354,356,
		9,0,0,0,355,352,1,0,0,0,355,354,1,0,0,0,356,359,1,0,0,0,357,358,1,0,0,
		0,357,355,1,0,0,0,358,360,1,0,0,0,359,357,1,0,0,0,360,361,3,81,40,0,361,
		363,1,0,0,0,362,340,1,0,0,0,362,351,1,0,0,0,363,102,1,0,0,0,364,369,3,
		79,39,0,365,368,3,79,39,0,366,368,3,77,38,0,367,365,1,0,0,0,367,366,1,
		0,0,0,368,371,1,0,0,0,369,367,1,0,0,0,369,370,1,0,0,0,370,104,1,0,0,0,
		371,369,1,0,0,0,372,376,3,77,38,0,373,375,3,77,38,0,374,373,1,0,0,0,375,
		378,1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,106,1,0,0,0,378,376,1,
		0,0,0,379,380,5,116,0,0,380,381,5,114,0,0,381,382,5,117,0,0,382,389,5,
		101,0,0,383,384,5,102,0,0,384,385,5,97,0,0,385,386,5,108,0,0,386,387,5,
		115,0,0,387,389,5,101,0,0,388,379,1,0,0,0,388,383,1,0,0,0,389,108,1,0,
		0,0,390,392,7,3,0,0,391,390,1,0,0,0,392,393,1,0,0,0,393,391,1,0,0,0,393,
		394,1,0,0,0,394,395,1,0,0,0,395,396,6,54,0,0,396,110,1,0,0,0,397,399,5,
		13,0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,403,5,10,0,
		0,401,403,5,13,0,0,402,398,1,0,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,
		402,1,0,0,0,404,405,1,0,0,0,405,406,1,0,0,0,406,407,6,55,0,0,407,112,1,
		0,0,0,408,409,5,47,0,0,409,410,5,42,0,0,410,414,1,0,0,0,411,413,9,0,0,
		0,412,411,1,0,0,0,413,416,1,0,0,0,414,415,1,0,0,0,414,412,1,0,0,0,415,
		417,1,0,0,0,416,414,1,0,0,0,417,418,5,42,0,0,418,419,5,47,0,0,419,420,
		1,0,0,0,420,421,6,56,0,0,421,114,1,0,0,0,422,423,5,47,0,0,423,424,5,47,
		0,0,424,428,1,0,0,0,425,427,8,4,0,0,426,425,1,0,0,0,427,430,1,0,0,0,428,
		426,1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,432,6,
		57,0,0,432,116,1,0,0,0,19,0,225,233,326,344,346,355,357,362,367,369,376,
		388,393,398,402,404,414,428,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
