//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/lasse/repo/git/aau-p4-compiler/YALCompiler/YALParser/Gammar/YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, TYPE=8, IN=9, 
		LETTER=10, ID=11, WHITESPACE=12, NEWLINE=13;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "LOWERCASE", "UPPERCASE", 
		"DIGIT", "TYPE", "IN", "LETTER", "ID", "WHITESPACE", "NEWLINE"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'('", "','", "')'", null, "'in'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "TYPE", "IN", "LETTER", 
		"ID", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,13,104,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,
		1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,70,8,10,1,11,1,11,1,11,1,12,1,12,
		3,12,77,8,12,1,13,1,13,1,13,5,13,82,8,13,10,13,12,13,85,9,13,1,14,4,14,
		88,8,14,11,14,12,14,89,1,14,1,14,1,15,3,15,95,8,15,1,15,1,15,4,15,99,8,
		15,11,15,12,15,100,1,15,1,15,0,0,16,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,0,
		17,0,19,0,21,8,23,9,25,10,27,11,29,12,31,13,1,0,4,1,0,97,122,1,0,65,90,
		1,0,48,57,2,0,9,9,32,32,110,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
		0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,1,33,1,0,0,0,3,35,
		1,0,0,0,5,37,1,0,0,0,7,39,1,0,0,0,9,41,1,0,0,0,11,43,1,0,0,0,13,45,1,0,
		0,0,15,47,1,0,0,0,17,49,1,0,0,0,19,51,1,0,0,0,21,69,1,0,0,0,23,71,1,0,
		0,0,25,76,1,0,0,0,27,78,1,0,0,0,29,87,1,0,0,0,31,98,1,0,0,0,33,34,5,123,
		0,0,34,2,1,0,0,0,35,36,5,125,0,0,36,4,1,0,0,0,37,38,5,59,0,0,38,6,1,0,
		0,0,39,40,5,61,0,0,40,8,1,0,0,0,41,42,5,40,0,0,42,10,1,0,0,0,43,44,5,44,
		0,0,44,12,1,0,0,0,45,46,5,41,0,0,46,14,1,0,0,0,47,48,7,0,0,0,48,16,1,0,
		0,0,49,50,7,1,0,0,50,18,1,0,0,0,51,52,7,2,0,0,52,20,1,0,0,0,53,54,5,105,
		0,0,54,55,5,51,0,0,55,70,5,50,0,0,56,57,5,102,0,0,57,58,5,51,0,0,58,70,
		5,50,0,0,59,60,5,115,0,0,60,61,5,116,0,0,61,62,5,114,0,0,62,63,5,105,0,
		0,63,64,5,110,0,0,64,70,5,103,0,0,65,66,5,98,0,0,66,67,5,111,0,0,67,68,
		5,111,0,0,68,70,5,108,0,0,69,53,1,0,0,0,69,56,1,0,0,0,69,59,1,0,0,0,69,
		65,1,0,0,0,70,22,1,0,0,0,71,72,5,105,0,0,72,73,5,110,0,0,73,24,1,0,0,0,
		74,77,3,15,7,0,75,77,3,17,8,0,76,74,1,0,0,0,76,75,1,0,0,0,77,26,1,0,0,
		0,78,83,3,25,12,0,79,82,3,25,12,0,80,82,3,19,9,0,81,79,1,0,0,0,81,80,1,
		0,0,0,82,85,1,0,0,0,83,81,1,0,0,0,83,84,1,0,0,0,84,28,1,0,0,0,85,83,1,
		0,0,0,86,88,7,3,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,
		0,0,0,90,91,1,0,0,0,91,92,6,14,0,0,92,30,1,0,0,0,93,95,5,13,0,0,94,93,
		1,0,0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,99,5,10,0,0,97,99,5,13,0,0,98,94,
		1,0,0,0,98,97,1,0,0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,
		102,1,0,0,0,102,103,6,15,0,0,103,32,1,0,0,0,9,0,69,76,81,83,89,94,98,100,
		1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
