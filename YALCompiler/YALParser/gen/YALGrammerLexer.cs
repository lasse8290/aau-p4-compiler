//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/source/repos/aau-p4-compiler/YALCompiler/YALParser/Gammar/YALGrammer.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, OPERATOR=8, TYPE=9, 
		IN=10, ID=11, NUMBER=12, WHITESPACE=13, NEWLINE=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "LOWERCASE", "UPPERCASE", 
		"DIGIT", "LETTER", "OPERATOR", "TYPE", "IN", "ID", "NUMBER", "WHITESPACE", 
		"NEWLINE"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "';'", "'}'", "'='", "'('", "')'", "','", null, null, "'in'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "OPERATOR", "TYPE", "IN", 
		"ID", "NUMBER", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,117,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,60,8,10,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
		1,12,1,12,1,12,3,12,80,8,12,1,13,1,13,1,13,1,14,1,14,1,14,5,14,88,8,14,
		10,14,12,14,91,9,14,1,15,1,15,5,15,95,8,15,10,15,12,15,98,9,15,1,16,4,
		16,101,8,16,11,16,12,16,102,1,16,1,16,1,17,3,17,108,8,17,1,17,1,17,4,17,
		112,8,17,11,17,12,17,113,1,17,1,17,0,0,18,1,1,3,2,5,3,7,4,9,5,11,6,13,
		7,15,0,17,0,19,0,21,0,23,8,25,9,27,10,29,11,31,12,33,13,35,14,1,0,5,1,
		0,97,122,1,0,65,90,1,0,48,57,3,0,42,43,45,45,47,47,2,0,9,9,32,32,123,0,
		1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
		0,13,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
		1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,
		0,7,43,1,0,0,0,9,45,1,0,0,0,11,47,1,0,0,0,13,49,1,0,0,0,15,51,1,0,0,0,
		17,53,1,0,0,0,19,55,1,0,0,0,21,59,1,0,0,0,23,61,1,0,0,0,25,79,1,0,0,0,
		27,81,1,0,0,0,29,84,1,0,0,0,31,92,1,0,0,0,33,100,1,0,0,0,35,111,1,0,0,
		0,37,38,5,123,0,0,38,2,1,0,0,0,39,40,5,59,0,0,40,4,1,0,0,0,41,42,5,125,
		0,0,42,6,1,0,0,0,43,44,5,61,0,0,44,8,1,0,0,0,45,46,5,40,0,0,46,10,1,0,
		0,0,47,48,5,41,0,0,48,12,1,0,0,0,49,50,5,44,0,0,50,14,1,0,0,0,51,52,7,
		0,0,0,52,16,1,0,0,0,53,54,7,1,0,0,54,18,1,0,0,0,55,56,7,2,0,0,56,20,1,
		0,0,0,57,60,3,15,7,0,58,60,3,17,8,0,59,57,1,0,0,0,59,58,1,0,0,0,60,22,
		1,0,0,0,61,62,7,3,0,0,62,24,1,0,0,0,63,64,5,105,0,0,64,65,5,51,0,0,65,
		80,5,50,0,0,66,67,5,102,0,0,67,68,5,51,0,0,68,80,5,50,0,0,69,70,5,115,
		0,0,70,71,5,116,0,0,71,72,5,114,0,0,72,73,5,105,0,0,73,74,5,110,0,0,74,
		80,5,103,0,0,75,76,5,98,0,0,76,77,5,111,0,0,77,78,5,111,0,0,78,80,5,108,
		0,0,79,63,1,0,0,0,79,66,1,0,0,0,79,69,1,0,0,0,79,75,1,0,0,0,80,26,1,0,
		0,0,81,82,5,105,0,0,82,83,5,110,0,0,83,28,1,0,0,0,84,89,3,21,10,0,85,88,
		3,21,10,0,86,88,3,19,9,0,87,85,1,0,0,0,87,86,1,0,0,0,88,91,1,0,0,0,89,
		87,1,0,0,0,89,90,1,0,0,0,90,30,1,0,0,0,91,89,1,0,0,0,92,96,3,19,9,0,93,
		95,3,19,9,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,
		32,1,0,0,0,98,96,1,0,0,0,99,101,7,4,0,0,100,99,1,0,0,0,101,102,1,0,0,0,
		102,100,1,0,0,0,102,103,1,0,0,0,103,104,1,0,0,0,104,105,6,16,0,0,105,34,
		1,0,0,0,106,108,5,13,0,0,107,106,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,
		0,109,112,5,10,0,0,110,112,5,13,0,0,111,107,1,0,0,0,111,110,1,0,0,0,112,
		113,1,0,0,0,113,111,1,0,0,0,113,114,1,0,0,0,114,115,1,0,0,0,115,116,6,
		17,0,0,116,36,1,0,0,0,10,0,59,79,87,89,96,102,107,111,113,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
