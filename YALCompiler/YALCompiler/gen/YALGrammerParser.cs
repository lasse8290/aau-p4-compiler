//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/source/repos/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class YALGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, EXTERNAL=19, ASYNC=20, AWAIT=21, RETURN=22, TYPE=23, IN=24, 
		OUT=25, REF=26, STRING=27, BOOLEAN=28, ID=29, POSITIVE_NUMBER=30, FLOAT=31, 
		TIMES=32, DIV=33, MOD=34, PLUS=35, MINUS=36, LSHIFT=37, RSHIFT=38, INCREMENT=39, 
		DECREMENT=40, LESS_THAN=41, LESS_THAN_OR_EQUAL=42, GREATER_THAN=43, GREATER_THAN_OR_EQUAL=44, 
		EQUALS=45, NOT_EQUAL=46, EQUAL=47, PLUS_EQUAL=48, MINUS_EQUAL=49, MULTIPLY_EQUAL=50, 
		DIVIDE_EQUAL=51, MODULO_EQUAL=52, BITWISE_NOT=53, LBRACKET=54, RBRACKET=55, 
		WHITESPACE=56, NEWLINE=57, COMMENT=58, LINE_COMMENT=59;
	public const int
		RULE_program = 0, RULE_externalFunctionDeclaration = 1, RULE_functionDeclaration = 2, 
		RULE_formalInputParams = 3, RULE_formalOutputParams = 4, RULE_statementBlock = 5, 
		RULE_blockStatement = 6, RULE_singleStatement = 7, RULE_variableDeclaration = 8, 
		RULE_variableDeclarationFormat = 9, RULE_assignment = 10, RULE_simpleAssignment = 11, 
		RULE_declarationAssignment = 12, RULE_expression = 13, RULE_functionCall = 14, 
		RULE_ifStatement = 15, RULE_elseIfStatement = 16, RULE_elseStatement = 17, 
		RULE_whileStatement = 18, RULE_forStatement = 19, RULE_identifier = 20;
	public static readonly string[] ruleNames = {
		"program", "externalFunctionDeclaration", "functionDeclaration", "formalInputParams", 
		"formalOutputParams", "statementBlock", "blockStatement", "singleStatement", 
		"variableDeclaration", "variableDeclarationFormat", "assignment", "simpleAssignment", 
		"declarationAssignment", "expression", "functionCall", "ifStatement", 
		"elseIfStatement", "elseStatement", "whileStatement", "forStatement", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "')'", "'{'", "'}'", "','", "'!'", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'if'", "'else if'", "'else'", "'while'", "'for'", 
		"'external'", "'async'", "'await'", "'return'", null, "'in'", "'out'", 
		"'ref'", null, null, null, null, null, "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'<<'", "'>>'", "'++'", "'--'", "'<'", "'<='", "'>'", "'>='", "'=='", 
		"'!='", "'='", "'+='", "'-='", "'*='", "'\\='", "'%='", "'~'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "EXTERNAL", "ASYNC", "AWAIT", 
		"RETURN", "TYPE", "IN", "OUT", "REF", "STRING", "BOOLEAN", "ID", "POSITIVE_NUMBER", 
		"FLOAT", "TIMES", "DIV", "MOD", "PLUS", "MINUS", "LSHIFT", "RSHIFT", "INCREMENT", 
		"DECREMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
		"EQUALS", "NOT_EQUAL", "EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
		"DIVIDE_EQUAL", "MODULO_EQUAL", "BITWISE_NOT", "LBRACKET", "RBRACKET", 
		"WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YALGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YALGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YALGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalFunctionDeclarationContext[] externalFunctionDeclaration() {
			return GetRuleContexts<ExternalFunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalFunctionDeclarationContext externalFunctionDeclaration(int i) {
			return GetRuleContext<ExternalFunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext[] variableDeclaration() {
			return GetRuleContexts<VariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration(int i) {
			return GetRuleContext<VariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1649881382920L) != 0)) {
				{
				State = 50;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
				case 1:
					{
					State = 42;
					externalFunctionDeclaration();
					}
					break;
				case 2:
					{
					State = 43;
					variableDeclaration();
					State = 44;
					Match(T__0);
					}
					break;
				case 3:
					{
					State = 46;
					assignment();
					State = 47;
					Match(T__0);
					}
					break;
				case 4:
					{
					State = 49;
					functionDeclaration();
					}
					break;
				}
				}
				State = 54;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 55;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YALGrammerParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(YALGrammerParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YALGrammerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(YALGrammerParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalInputParamsContext formalInputParams() {
			return GetRuleContext<FormalInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalOutputParamsContext formalOutputParams() {
			return GetRuleContext<FormalOutputParamsContext>(0);
		}
		public ExternalFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterExternalFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitExternalFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalFunctionDeclarationContext externalFunctionDeclaration() {
		ExternalFunctionDeclarationContext _localctx = new ExternalFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_externalFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 57;
			Match(EXTERNAL);
			State = 58;
			Match(LESS_THAN);
			State = 59;
			Match(STRING);
			State = 60;
			Match(GREATER_THAN);
			State = 61;
			Match(ID);
			State = 62;
			Match(T__1);
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 63;
				formalInputParams();
				}
			}

			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 66;
				formalOutputParams();
				}
			}

			State = 69;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YALGrammerParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalInputParamsContext formalInputParams() {
			return GetRuleContext<FormalInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalOutputParamsContext formalOutputParams() {
			return GetRuleContext<FormalOutputParamsContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 71;
				Match(ASYNC);
				}
			}

			State = 74;
			Match(ID);
			State = 75;
			Match(T__1);
			State = 77;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 76;
				formalInputParams();
				}
			}

			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 79;
				formalOutputParams();
				}
			}

			State = 82;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalInputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YALGrammerParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public FormalInputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalInputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalInputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalInputParamsContext formalInputParams() {
		FormalInputParamsContext _localctx = new FormalInputParamsContext(Context, State);
		EnterRule(_localctx, 6, RULE_formalInputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84;
			Match(IN);
			State = 85;
			Match(T__2);
			State = 87;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE || _la==REF) {
				{
				State = 86;
				variableDeclaration();
				}
			}

			State = 89;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalOutputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(YALGrammerParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		public FormalOutputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalOutputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalOutputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalOutputParamsContext formalOutputParams() {
		FormalOutputParamsContext _localctx = new FormalOutputParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formalOutputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			Match(OUT);
			State = 92;
			Match(T__2);
			State = 94;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TYPE || _la==REF) {
				{
				State = 93;
				variableDeclaration();
				}
			}

			State = 96;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext[] singleStatement() {
			return GetRuleContexts<SingleStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext singleStatement(int i) {
			return GetRuleContext<SingleStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__4);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1649886511112L) != 0)) {
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
				case T__16:
				case T__17:
					{
					State = 99;
					blockStatement();
					}
					break;
				case T__2:
				case AWAIT:
				case RETURN:
				case TYPE:
				case REF:
				case ID:
				case INCREMENT:
				case DECREMENT:
					{
					State = 100;
					singleStatement();
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 101;
						Match(T__0);
						}
						}
						State = 104;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_blockStatement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ifStatement();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				whileStatement();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YALGrammerParser.RETURN, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleStatement);
		try {
			State = 122;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 124;
			variableDeclarationFormat();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__6) {
				{
				{
				State = 125;
				Match(T__6);
				State = 126;
				variableDeclarationFormat();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationFormatContext : ParserRuleContext {
		public VariableDeclarationFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationFormat; } }
	 
		public VariableDeclarationFormatContext() { }
		public virtual void CopyFrom(VariableDeclarationFormatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(YALGrammerParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(YALGrammerParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER() { return GetToken(YALGrammerParser.POSITIVE_NUMBER, 0); }
		public ArrayDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceVariableDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(YALGrammerParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat() {
			return GetRuleContext<VariableDeclarationFormatContext>(0);
		}
		public ReferenceVariableDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterReferenceVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitReferenceVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleVariableDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public SimpleVariableDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationFormatContext variableDeclarationFormat() {
		VariableDeclarationFormatContext _localctx = new VariableDeclarationFormatContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarationFormat);
		int _la;
		try {
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				_localctx = new ReferenceVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 132;
				Match(REF);
				State = 133;
				variableDeclarationFormat();
				}
				break;
			case 2:
				_localctx = new ArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 134;
				Match(TYPE);
				State = 135;
				Match(LBRACKET);
				State = 137;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POSITIVE_NUMBER) {
					{
					State = 136;
					Match(POSITIVE_NUMBER);
					}
				}

				State = 139;
				Match(RBRACKET);
				State = 140;
				Match(ID);
				}
				break;
			case 3:
				_localctx = new SimpleVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 141;
				Match(TYPE);
				State = 142;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 20, RULE_assignment);
		try {
			State = 147;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case ID:
			case INCREMENT:
			case DECREMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 145;
				simpleAssignment();
				}
				break;
			case TYPE:
			case REF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 146;
				declarationAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAssignmentContext : ParserRuleContext {
		public SimpleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAssignment; } }
	 
		public SimpleAssignmentContext() { }
		public virtual void CopyFrom(SimpleAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_EQUAL() { return GetToken(YALGrammerParser.PLUS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_EQUAL() { return GetToken(YALGrammerParser.MINUS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_EQUAL() { return GetToken(YALGrammerParser.MULTIPLY_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_EQUAL() { return GetToken(YALGrammerParser.DIVIDE_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_EQUAL() { return GetToken(YALGrammerParser.MODULO_EQUAL, 0); }
		public IdAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPreIncrementDecrementAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public IdPreIncrementDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPreIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPreIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPreIncrementDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPostIncrementDecrementAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public IdPostIncrementDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPostIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPostIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPostIncrementDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAssignmentContext simpleAssignment() {
		SimpleAssignmentContext _localctx = new SimpleAssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_simpleAssignment);
		int _la;
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				_localctx = new IdAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 149;
				identifier(0);
				State = 150;
				((IdAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 8866461766385664L) != 0)) ) {
					((IdAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 151;
				expression(0);
				}
				break;
			case 2:
				_localctx = new IdPreIncrementDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				((IdPreIncrementDecrementAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
					((IdPreIncrementDecrementAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 154;
				identifier(0);
				}
				break;
			case 3:
				_localctx = new IdPostIncrementDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 155;
				identifier(0);
				State = 156;
				((IdPostIncrementDecrementAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
					((IdPostIncrementDecrementAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationAssignmentContext declarationAssignment() {
		DeclarationAssignmentContext _localctx = new DeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_declarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			variableDeclaration();
			State = 161;
			Match(EQUAL);
			State = 162;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(YALGrammerParser.BITWISE_NOT, 0); }
		public PrefixUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionSubtractionContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YALGrammerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public AdditionSubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAdditionSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAdditionSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(YALGrammerParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public FloatLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(YALGrammerParser.BOOLEAN, 0); }
		public BooleanLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		public VariableAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftRightShiftContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(YALGrammerParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(YALGrammerParser.RSHIFT, 0); }
		public LeftRightShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterLeftRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitLeftRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YALGrammerParser.STRING, 0); }
		public StringLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(YALGrammerParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(YALGrammerParser.LESS_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(YALGrammerParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(YALGrammerParser.GREATER_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YALGrammerParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(YALGrammerParser.NOT_EQUAL, 0); }
		public ComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ReferenceExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REF() { return GetToken(YALGrammerParser.REF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReferenceExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitReferenceExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReferenceExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementDecrementContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public PostIncrementDecrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPostIncrementDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPostIncrementDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(YALGrammerParser.BITWISE_NOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitwiseNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationDivisionModuloContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(YALGrammerParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(YALGrammerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(YALGrammerParser.MOD, 0); }
		public MultiplicationDivisionModuloContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplicationDivisionModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplicationDivisionModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationDivisionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionListContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER() { return GetToken(YALGrammerParser.POSITIVE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public NumberLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 195;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 165;
				Match(T__7);
				State = 166;
				expression(24);
				}
				break;
			case 2:
				{
				_localctx = new BitwiseNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 167;
				Match(BITWISE_NOT);
				State = 168;
				expression(23);
				}
				break;
			case 3:
				{
				_localctx = new PrefixUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 169;
				((PrefixUnaryContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 9008848522182656L) != 0)) ) {
					((PrefixUnaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 170;
				expression(21);
				}
				break;
			case 4:
				{
				_localctx = new ReferenceExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 171;
				Match(REF);
				State = 172;
				expression(11);
				}
				break;
			case 5:
				{
				_localctx = new VariableAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 173;
				simpleAssignment();
				}
				break;
			case 6:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 174;
				identifier(0);
				}
				break;
			case 7:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 175;
				functionCall();
				}
				break;
			case 8:
				{
				_localctx = new FloatLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 176;
					Match(MINUS);
					}
				}

				State = 179;
				Match(FLOAT);
				}
				break;
			case 9:
				{
				_localctx = new NumberLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 181;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 180;
					Match(MINUS);
					}
				}

				State = 183;
				Match(POSITIVE_NUMBER);
				}
				break;
			case 10:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 184;
				Match(STRING);
				}
				break;
			case 11:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 185;
				Match(BOOLEAN);
				}
				break;
			case 12:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 186;
				Match(T__2);
				State = 187;
				expression(0);
				State = 188;
				Match(T__3);
				}
				break;
			case 13:
				{
				_localctx = new ArrayLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 190;
				Match(T__4);
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9008921471615272L) != 0)) {
					{
					State = 191;
					expression(0);
					}
				}

				State = 194;
				Match(T__5);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 235;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 233;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationDivisionModuloContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 197;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 198;
						((MultiplicationDivisionModuloContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 30064771072L) != 0)) ) {
							((MultiplicationDivisionModuloContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 199;
						expression(21);
						}
						break;
					case 2:
						{
						_localctx = new AdditionSubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 200;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 201;
						((AdditionSubtractionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionSubtractionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 202;
						expression(20);
						}
						break;
					case 3:
						{
						_localctx = new LeftRightShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 203;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 204;
						((LeftRightShiftContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LSHIFT || _la==RSHIFT) ) {
							((LeftRightShiftContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 205;
						expression(19);
						}
						break;
					case 4:
						{
						_localctx = new BitwiseAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 206;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 207;
						Match(T__8);
						State = 208;
						expression(18);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 209;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 210;
						Match(T__9);
						State = 211;
						expression(17);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 212;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 213;
						Match(T__10);
						State = 214;
						expression(16);
						}
						break;
					case 7:
						{
						_localctx = new ComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 215;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 216;
						((ComparisonContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 138538465099776L) != 0)) ) {
							((ComparisonContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 217;
						expression(15);
						}
						break;
					case 8:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 218;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 219;
						Match(T__11);
						State = 220;
						expression(14);
						}
						break;
					case 9:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 221;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 222;
						Match(T__12);
						State = 223;
						expression(13);
						}
						break;
					case 10:
						{
						_localctx = new PostIncrementDecrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 224;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 225;
						((PostIncrementDecrementContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INCREMENT || _la==DECREMENT) ) {
							((PostIncrementDecrementContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 11:
						{
						_localctx = new ExpressionListContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 226;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 229;
						ErrorHandler.Sync(this);
						_alt = 1;
						do {
							switch (_alt) {
							case 1:
								{
								{
								State = 227;
								Match(T__6);
								State = 228;
								expression(0);
								}
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							State = 231;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
						} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
						}
						break;
					}
					} 
				}
				State = 237;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(YALGrammerParser.AWAIT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 28, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 238;
				Match(AWAIT);
				}
			}

			State = 241;
			Match(ID);
			State = 242;
			Match(T__2);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 9008921471615272L) != 0)) {
				{
				State = 243;
				expression(0);
				}
			}

			State = 246;
			Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 30, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248;
			Match(T__13);
			State = 249;
			Match(T__2);
			State = 250;
			expression(0);
			State = 251;
			Match(T__3);
			State = 252;
			statementBlock();
			State = 256;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 253;
				elseIfStatement();
				}
				}
				State = 258;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 260;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 259;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 262;
			Match(T__14);
			State = 263;
			Match(T__2);
			State = 264;
			expression(0);
			State = 265;
			Match(T__3);
			State = 266;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 268;
			Match(T__15);
			State = 269;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271;
			Match(T__16);
			State = 272;
			Match(T__2);
			State = 273;
			expression(0);
			State = 274;
			Match(T__3);
			State = 275;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			Match(T__17);
			State = 278;
			Match(T__2);
			State = 279;
			declarationAssignment();
			State = 280;
			Match(T__0);
			State = 281;
			expression(0);
			State = 282;
			Match(T__0);
			State = 283;
			assignment();
			State = 284;
			Match(T__3);
			State = 285;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParenthesizedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(YALGrammerParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(YALGrammerParser.RBRACKET, 0); }
		public ArrayElementIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayElementIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayElementIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public SimpleIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierListContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public IdentifierListContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		return identifier(0);
	}

	private IdentifierContext identifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		IdentifierContext _localctx = new IdentifierContext(Context, _parentState);
		IdentifierContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_identifier, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				{
				_localctx = new ArrayElementIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 288;
				Match(ID);
				State = 289;
				Match(LBRACKET);
				State = 290;
				expression(0);
				State = 291;
				Match(RBRACKET);
				}
				break;
			case 2:
				{
				_localctx = new SimpleIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 293;
				Match(ID);
				}
				break;
			case 3:
				{
				_localctx = new ParenthesizedIdentifierContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 294;
				Match(T__2);
				State = 295;
				identifier(0);
				State = 296;
				Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 309;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new IdentifierListContext(new IdentifierContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_identifier);
					State = 300;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 303;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 301;
							Match(T__6);
							State = 302;
							identifier(0);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 305;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 311;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 20: return identifier_sempred((IdentifierContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 20);
		case 1: return Precpred(Context, 19);
		case 2: return Precpred(Context, 18);
		case 3: return Precpred(Context, 17);
		case 4: return Precpred(Context, 16);
		case 5: return Precpred(Context, 15);
		case 6: return Precpred(Context, 14);
		case 7: return Precpred(Context, 13);
		case 8: return Precpred(Context, 12);
		case 9: return Precpred(Context, 22);
		case 10: return Precpred(Context, 1);
		}
		return true;
	}
	private bool identifier_sempred(IdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,59,313,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,1,0,1,0,1,
		0,1,0,1,0,1,0,1,0,1,0,5,0,51,8,0,10,0,12,0,54,9,0,1,0,1,0,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,3,1,65,8,1,1,1,3,1,68,8,1,1,1,1,1,1,2,3,2,73,8,2,1,2,1,
		2,1,2,3,2,78,8,2,1,2,3,2,81,8,2,1,2,1,2,1,3,1,3,1,3,3,3,88,8,3,1,3,1,3,
		1,4,1,4,1,4,3,4,95,8,4,1,4,1,4,1,5,1,5,1,5,1,5,4,5,103,8,5,11,5,12,5,104,
		5,5,107,8,5,10,5,12,5,110,9,5,1,5,1,5,1,6,1,6,1,6,3,6,117,8,6,1,7,1,7,
		1,7,1,7,3,7,123,8,7,1,8,1,8,1,8,5,8,128,8,8,10,8,12,8,131,9,8,1,9,1,9,
		1,9,1,9,1,9,3,9,138,8,9,1,9,1,9,1,9,1,9,3,9,144,8,9,1,10,1,10,3,10,148,
		8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,159,8,11,1,12,1,
		12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,3,13,178,8,13,1,13,1,13,3,13,182,8,13,1,13,1,13,1,13,1,13,1,13,
		1,13,1,13,1,13,1,13,3,13,193,8,13,1,13,3,13,196,8,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
		13,4,13,230,8,13,11,13,12,13,231,5,13,234,8,13,10,13,12,13,237,9,13,1,
		14,3,14,240,8,14,1,14,1,14,1,14,3,14,245,8,14,1,14,1,14,1,15,1,15,1,15,
		1,15,1,15,1,15,5,15,255,8,15,10,15,12,15,258,9,15,1,15,3,15,261,8,15,1,
		16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,
		18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,299,8,20,1,20,1,20,1,20,4,20,
		304,8,20,11,20,12,20,305,5,20,308,8,20,10,20,12,20,311,9,20,1,20,0,2,26,
		40,21,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,0,7,1,
		0,47,52,1,0,39,40,2,0,39,40,53,53,1,0,32,34,1,0,35,36,1,0,37,38,1,0,41,
		46,352,0,52,1,0,0,0,2,57,1,0,0,0,4,72,1,0,0,0,6,84,1,0,0,0,8,91,1,0,0,
		0,10,98,1,0,0,0,12,116,1,0,0,0,14,122,1,0,0,0,16,124,1,0,0,0,18,143,1,
		0,0,0,20,147,1,0,0,0,22,158,1,0,0,0,24,160,1,0,0,0,26,195,1,0,0,0,28,239,
		1,0,0,0,30,248,1,0,0,0,32,262,1,0,0,0,34,268,1,0,0,0,36,271,1,0,0,0,38,
		277,1,0,0,0,40,298,1,0,0,0,42,51,3,2,1,0,43,44,3,16,8,0,44,45,5,1,0,0,
		45,51,1,0,0,0,46,47,3,20,10,0,47,48,5,1,0,0,48,51,1,0,0,0,49,51,3,4,2,
		0,50,42,1,0,0,0,50,43,1,0,0,0,50,46,1,0,0,0,50,49,1,0,0,0,51,54,1,0,0,
		0,52,50,1,0,0,0,52,53,1,0,0,0,53,55,1,0,0,0,54,52,1,0,0,0,55,56,5,0,0,
		1,56,1,1,0,0,0,57,58,5,19,0,0,58,59,5,41,0,0,59,60,5,27,0,0,60,61,5,43,
		0,0,61,62,5,29,0,0,62,64,5,2,0,0,63,65,3,6,3,0,64,63,1,0,0,0,64,65,1,0,
		0,0,65,67,1,0,0,0,66,68,3,8,4,0,67,66,1,0,0,0,67,68,1,0,0,0,68,69,1,0,
		0,0,69,70,5,1,0,0,70,3,1,0,0,0,71,73,5,20,0,0,72,71,1,0,0,0,72,73,1,0,
		0,0,73,74,1,0,0,0,74,75,5,29,0,0,75,77,5,2,0,0,76,78,3,6,3,0,77,76,1,0,
		0,0,77,78,1,0,0,0,78,80,1,0,0,0,79,81,3,8,4,0,80,79,1,0,0,0,80,81,1,0,
		0,0,81,82,1,0,0,0,82,83,3,10,5,0,83,5,1,0,0,0,84,85,5,24,0,0,85,87,5,3,
		0,0,86,88,3,16,8,0,87,86,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,0,89,90,5,4,
		0,0,90,7,1,0,0,0,91,92,5,25,0,0,92,94,5,3,0,0,93,95,3,16,8,0,94,93,1,0,
		0,0,94,95,1,0,0,0,95,96,1,0,0,0,96,97,5,4,0,0,97,9,1,0,0,0,98,108,5,5,
		0,0,99,107,3,12,6,0,100,102,3,14,7,0,101,103,5,1,0,0,102,101,1,0,0,0,103,
		104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,107,1,0,0,0,106,99,1,0,
		0,0,106,100,1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,
		111,1,0,0,0,110,108,1,0,0,0,111,112,5,6,0,0,112,11,1,0,0,0,113,117,3,30,
		15,0,114,117,3,36,18,0,115,117,3,38,19,0,116,113,1,0,0,0,116,114,1,0,0,
		0,116,115,1,0,0,0,117,13,1,0,0,0,118,123,3,16,8,0,119,123,3,20,10,0,120,
		123,3,28,14,0,121,123,5,22,0,0,122,118,1,0,0,0,122,119,1,0,0,0,122,120,
		1,0,0,0,122,121,1,0,0,0,123,15,1,0,0,0,124,129,3,18,9,0,125,126,5,7,0,
		0,126,128,3,18,9,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,
		130,1,0,0,0,130,17,1,0,0,0,131,129,1,0,0,0,132,133,5,26,0,0,133,144,3,
		18,9,0,134,135,5,23,0,0,135,137,5,54,0,0,136,138,5,30,0,0,137,136,1,0,
		0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,140,5,55,0,0,140,144,5,29,0,0,
		141,142,5,23,0,0,142,144,5,29,0,0,143,132,1,0,0,0,143,134,1,0,0,0,143,
		141,1,0,0,0,144,19,1,0,0,0,145,148,3,22,11,0,146,148,3,24,12,0,147,145,
		1,0,0,0,147,146,1,0,0,0,148,21,1,0,0,0,149,150,3,40,20,0,150,151,7,0,0,
		0,151,152,3,26,13,0,152,159,1,0,0,0,153,154,7,1,0,0,154,159,3,40,20,0,
		155,156,3,40,20,0,156,157,7,1,0,0,157,159,1,0,0,0,158,149,1,0,0,0,158,
		153,1,0,0,0,158,155,1,0,0,0,159,23,1,0,0,0,160,161,3,16,8,0,161,162,5,
		47,0,0,162,163,3,26,13,0,163,25,1,0,0,0,164,165,6,13,-1,0,165,166,5,8,
		0,0,166,196,3,26,13,24,167,168,5,53,0,0,168,196,3,26,13,23,169,170,7,2,
		0,0,170,196,3,26,13,21,171,172,5,26,0,0,172,196,3,26,13,11,173,196,3,22,
		11,0,174,196,3,40,20,0,175,196,3,28,14,0,176,178,5,36,0,0,177,176,1,0,
		0,0,177,178,1,0,0,0,178,179,1,0,0,0,179,196,5,31,0,0,180,182,5,36,0,0,
		181,180,1,0,0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,196,5,30,0,0,184,196,
		5,27,0,0,185,196,5,28,0,0,186,187,5,3,0,0,187,188,3,26,13,0,188,189,5,
		4,0,0,189,196,1,0,0,0,190,192,5,5,0,0,191,193,3,26,13,0,192,191,1,0,0,
		0,192,193,1,0,0,0,193,194,1,0,0,0,194,196,5,6,0,0,195,164,1,0,0,0,195,
		167,1,0,0,0,195,169,1,0,0,0,195,171,1,0,0,0,195,173,1,0,0,0,195,174,1,
		0,0,0,195,175,1,0,0,0,195,177,1,0,0,0,195,181,1,0,0,0,195,184,1,0,0,0,
		195,185,1,0,0,0,195,186,1,0,0,0,195,190,1,0,0,0,196,235,1,0,0,0,197,198,
		10,20,0,0,198,199,7,3,0,0,199,234,3,26,13,21,200,201,10,19,0,0,201,202,
		7,4,0,0,202,234,3,26,13,20,203,204,10,18,0,0,204,205,7,5,0,0,205,234,3,
		26,13,19,206,207,10,17,0,0,207,208,5,9,0,0,208,234,3,26,13,18,209,210,
		10,16,0,0,210,211,5,10,0,0,211,234,3,26,13,17,212,213,10,15,0,0,213,214,
		5,11,0,0,214,234,3,26,13,16,215,216,10,14,0,0,216,217,7,6,0,0,217,234,
		3,26,13,15,218,219,10,13,0,0,219,220,5,12,0,0,220,234,3,26,13,14,221,222,
		10,12,0,0,222,223,5,13,0,0,223,234,3,26,13,13,224,225,10,22,0,0,225,234,
		7,1,0,0,226,229,10,1,0,0,227,228,5,7,0,0,228,230,3,26,13,0,229,227,1,0,
		0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,
		197,1,0,0,0,233,200,1,0,0,0,233,203,1,0,0,0,233,206,1,0,0,0,233,209,1,
		0,0,0,233,212,1,0,0,0,233,215,1,0,0,0,233,218,1,0,0,0,233,221,1,0,0,0,
		233,224,1,0,0,0,233,226,1,0,0,0,234,237,1,0,0,0,235,233,1,0,0,0,235,236,
		1,0,0,0,236,27,1,0,0,0,237,235,1,0,0,0,238,240,5,21,0,0,239,238,1,0,0,
		0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,5,29,0,0,242,244,5,3,0,0,243,
		245,3,26,13,0,244,243,1,0,0,0,244,245,1,0,0,0,245,246,1,0,0,0,246,247,
		5,4,0,0,247,29,1,0,0,0,248,249,5,14,0,0,249,250,5,3,0,0,250,251,3,26,13,
		0,251,252,5,4,0,0,252,256,3,10,5,0,253,255,3,32,16,0,254,253,1,0,0,0,255,
		258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,260,1,0,0,0,258,256,1,
		0,0,0,259,261,3,34,17,0,260,259,1,0,0,0,260,261,1,0,0,0,261,31,1,0,0,0,
		262,263,5,15,0,0,263,264,5,3,0,0,264,265,3,26,13,0,265,266,5,4,0,0,266,
		267,3,10,5,0,267,33,1,0,0,0,268,269,5,16,0,0,269,270,3,10,5,0,270,35,1,
		0,0,0,271,272,5,17,0,0,272,273,5,3,0,0,273,274,3,26,13,0,274,275,5,4,0,
		0,275,276,3,10,5,0,276,37,1,0,0,0,277,278,5,18,0,0,278,279,5,3,0,0,279,
		280,3,24,12,0,280,281,5,1,0,0,281,282,3,26,13,0,282,283,5,1,0,0,283,284,
		3,20,10,0,284,285,5,4,0,0,285,286,3,10,5,0,286,39,1,0,0,0,287,288,6,20,
		-1,0,288,289,5,29,0,0,289,290,5,54,0,0,290,291,3,26,13,0,291,292,5,55,
		0,0,292,299,1,0,0,0,293,299,5,29,0,0,294,295,5,3,0,0,295,296,3,40,20,0,
		296,297,5,4,0,0,297,299,1,0,0,0,298,287,1,0,0,0,298,293,1,0,0,0,298,294,
		1,0,0,0,299,309,1,0,0,0,300,303,10,2,0,0,301,302,5,7,0,0,302,304,3,40,
		20,0,303,301,1,0,0,0,304,305,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,
		308,1,0,0,0,307,300,1,0,0,0,308,311,1,0,0,0,309,307,1,0,0,0,309,310,1,
		0,0,0,310,41,1,0,0,0,311,309,1,0,0,0,33,50,52,64,67,72,77,80,87,94,104,
		106,108,116,122,129,137,143,147,158,177,181,192,195,231,233,235,239,244,
		256,260,298,305,309
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
