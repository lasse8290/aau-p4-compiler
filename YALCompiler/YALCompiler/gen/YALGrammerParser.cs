//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/Documents/GitHub/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, ARRAY_DEFINER=41, ASYNC=42, AWAIT=43, RETURN=44, TYPE=45, 
		ENUM=46, IN=47, OUT=48, STRING=49, ID=50, SIGNED_NUMBER=51, NEGATIVE_NUMBER=52, 
		POSITIVE_NUMBER=53, BOOLEAN=54, WHITESPACE=55, NEWLINE=56, COMMENT=57, 
		LINE_COMMENT=58;
	public const int
		RULE_program = 0, RULE_globalVariableDeclaration = 1, RULE_functionDeclaration = 2, 
		RULE_formalInputParams = 3, RULE_formalOutputParams = 4, RULE_statementBlock = 5, 
		RULE_blockStatement = 6, RULE_singleStatement = 7, RULE_variableDeclaration = 8, 
		RULE_variableDeclarationFormat = 9, RULE_enumDeclaration = 10, RULE_assignment = 11, 
		RULE_simpleAssignment = 12, RULE_declarationAssignment = 13, RULE_tupleAssignment = 14, 
		RULE_tupleDeclaration = 15, RULE_expression = 16, RULE_functionCall = 17, 
		RULE_actualInputParams = 18, RULE_predicate = 19, RULE_ifStatement = 20, 
		RULE_elseIfStatement = 21, RULE_elseStatement = 22, RULE_whileStatement = 23, 
		RULE_forStatement = 24;
	public static readonly string[] ruleNames = {
		"program", "globalVariableDeclaration", "functionDeclaration", "formalInputParams", 
		"formalOutputParams", "statementBlock", "blockStatement", "singleStatement", 
		"variableDeclaration", "variableDeclarationFormat", "enumDeclaration", 
		"assignment", "simpleAssignment", "declarationAssignment", "tupleAssignment", 
		"tupleDeclaration", "expression", "functionCall", "actualInputParams", 
		"predicate", "ifStatement", "elseIfStatement", "elseStatement", "whileStatement", 
		"forStatement"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "','", "')'", "'{'", "'}'", "'='", "'+='", 
		"'-='", "'*='", "'\\='", "'%='", "'++'", "'--'", "'~'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'<<'", "'>>'", "'&'", "'^'", "'|'", "'!'", "'&&'", 
		"'||'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'if'", "'else if'", 
		"'else'", "'while'", "'for'", null, "'async'", "'await'", "'return'", 
		null, "'enum'", "'in'", "'out'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ARRAY_DEFINER", "ASYNC", "AWAIT", "RETURN", 
		"TYPE", "ENUM", "IN", "OUT", "STRING", "ID", "SIGNED_NUMBER", "NEGATIVE_NUMBER", 
		"POSITIVE_NUMBER", "BOOLEAN", "WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YALGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YALGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YALGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1165482325442560L) != 0) {
				{
				State = 52;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TYPE:
					{
					State = 50;
					globalVariableDeclaration();
					}
					break;
				case ASYNC:
				case ID:
					{
					State = 51;
					functionDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 56;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 57;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_DEFINER() { return GetToken(YALGrammerParser.ARRAY_DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(TYPE);
			State = 60;
			Match(ARRAY_DEFINER);
			State = 61;
			Match(ID);
			State = 62;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YALGrammerParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalInputParamsContext formalInputParams() {
			return GetRuleContext<FormalInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalOutputParamsContext formalOutputParams() {
			return GetRuleContext<FormalOutputParamsContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 64;
				Match(ASYNC);
				}
			}

			State = 67;
			Match(ID);
			State = 68;
			Match(T__1);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 69;
				formalInputParams();
				}
			}

			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 72;
				formalOutputParams();
				}
			}

			State = 75;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalInputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YALGrammerParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public FormalInputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalInputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalInputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalInputParamsContext formalInputParams() {
		FormalInputParamsContext _localctx = new FormalInputParamsContext(Context, State);
		EnterRule(_localctx, 6, RULE_formalInputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 77;
			Match(IN);
			State = 78;
			Match(T__2);
			State = 79;
			variableDeclarationFormat();
			State = 84;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 80;
				Match(T__3);
				State = 81;
				variableDeclarationFormat();
				}
				}
				State = 86;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 87;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalOutputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(YALGrammerParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public FormalOutputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalOutputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalOutputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalOutputParamsContext formalOutputParams() {
		FormalOutputParamsContext _localctx = new FormalOutputParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formalOutputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89;
			Match(OUT);
			State = 90;
			Match(T__2);
			State = 91;
			variableDeclarationFormat();
			State = 96;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 92;
				Match(T__3);
				State = 93;
				variableDeclarationFormat();
				}
				}
				State = 98;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 99;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext[] singleStatement() {
			return GetRuleContexts<SingleStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext singleStatement(int i) {
			return GetRuleContext<SingleStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			Match(T__5);
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 1259559289143304L) != 0) {
				{
				State = 106;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__35:
				case T__38:
				case T__39:
					{
					State = 102;
					blockStatement();
					}
					break;
				case T__2:
				case T__13:
				case T__14:
				case AWAIT:
				case RETURN:
				case TYPE:
				case ENUM:
				case ID:
					{
					State = 103;
					singleStatement();
					State = 104;
					Match(T__0);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 111;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 12, RULE_blockStatement);
		try {
			State = 116;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__35:
				EnterOuterAlt(_localctx, 1);
				{
				State = 113;
				ifStatement();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 2);
				{
				State = 114;
				whileStatement();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 3);
				{
				State = 115;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YALGrammerParser.RETURN, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_singleStatement);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				enumDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				assignment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				functionCall();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TupleVariableDeclarationContext : VariableDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleDeclarationContext tupleDeclaration() {
			return GetRuleContext<TupleDeclarationContext>(0);
		}
		public TupleVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleVariableDeclarationFormatContext : VariableDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat() {
			return GetRuleContext<VariableDeclarationFormatContext>(0);
		}
		public SimpleVariableDeclarationFormatContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleVariableDeclarationFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleVariableDeclarationFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableDeclarationFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_variableDeclaration);
		try {
			State = 127;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				_localctx = new SimpleVariableDeclarationFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 125;
				variableDeclarationFormat();
				}
				break;
			case T__2:
				_localctx = new TupleVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 126;
				tupleDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationFormatContext : ParserRuleContext {
		public VariableDeclarationFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationFormat; } }
	 
		public VariableDeclarationFormatContext() { }
		public virtual void CopyFrom(VariableDeclarationFormatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_DEFINER() { return GetToken(YALGrammerParser.ARRAY_DEFINER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public ArrayDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleVariableDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public SimpleVariableDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationFormatContext variableDeclarationFormat() {
		VariableDeclarationFormatContext _localctx = new VariableDeclarationFormatContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarationFormat);
		try {
			State = 134;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				_localctx = new ArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 129;
				Match(TYPE);
				State = 130;
				Match(ARRAY_DEFINER);
				State = 131;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new SimpleVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 132;
				Match(TYPE);
				State = 133;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM() { return GetToken(YALGrammerParser.ENUM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ID() { return GetTokens(YALGrammerParser.ID); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID(int i) {
			return GetToken(YALGrammerParser.ID, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] POSITIVE_NUMBER() { return GetTokens(YALGrammerParser.POSITIVE_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER(int i) {
			return GetToken(YALGrammerParser.POSITIVE_NUMBER, i);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 20, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 136;
			Match(ENUM);
			State = 137;
			Match(ID);
			State = 138;
			Match(T__5);
			State = 159;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				{
				{
				State = 139;
				Match(ID);
				State = 144;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 140;
					Match(T__3);
					State = 141;
					Match(ID);
					}
					}
					State = 146;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			case 2:
				{
				{
				State = 147;
				Match(ID);
				State = 148;
				Match(T__7);
				State = 149;
				Match(POSITIVE_NUMBER);
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 150;
					Match(T__3);
					State = 151;
					Match(ID);
					State = 152;
					Match(T__7);
					State = 153;
					Match(POSITIVE_NUMBER);
					}
					}
					State = 158;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				}
				break;
			}
			State = 161;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleAssignmentContext tupleAssignment() {
			return GetRuleContext<TupleAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			State = 166;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163;
				simpleAssignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164;
				declarationAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 165;
				tupleAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAssignmentContext : ParserRuleContext {
		public SimpleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAssignment; } }
	 
		public SimpleAssignmentContext() { }
		public virtual void CopyFrom(SimpleAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public IdAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPreDecrementAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public IdPreDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPreDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPreDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPreDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdMultiplicationAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdMultiplicationAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdMultiplicationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdMultiplicationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdMultiplicationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdDivisionAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdDivisionAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdDivisionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdDivisionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPostDecrementAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public IdPostDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPostDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPostDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPostDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPreIncrementAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public IdPreIncrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPreIncrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPreIncrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPreIncrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPostIncrementAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public IdPostIncrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPostIncrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPostIncrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPostIncrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdModuloAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdModuloAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdModuloAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdModuloAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdModuloAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdSubtractionAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdSubtractionAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdSubtractionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdSubtractionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdSubtractionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAdditionAssignmentContext : SimpleAssignmentContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdAdditionAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdAdditionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdAdditionAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAdditionAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAssignmentContext simpleAssignment() {
		SimpleAssignmentContext _localctx = new SimpleAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleAssignment);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,17,Context) ) {
			case 1:
				_localctx = new IdAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 168;
				Match(ID);
				State = 169;
				Match(T__7);
				State = 170;
				predicate(0);
				}
				break;
			case 2:
				_localctx = new IdAdditionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				Match(ID);
				State = 172;
				Match(T__8);
				State = 173;
				expression(0);
				}
				break;
			case 3:
				_localctx = new IdSubtractionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 174;
				Match(ID);
				State = 175;
				Match(T__9);
				State = 176;
				expression(0);
				}
				break;
			case 4:
				_localctx = new IdMultiplicationAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 177;
				Match(ID);
				State = 178;
				Match(T__10);
				State = 179;
				expression(0);
				}
				break;
			case 5:
				_localctx = new IdDivisionAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 180;
				Match(ID);
				State = 181;
				Match(T__11);
				State = 182;
				expression(0);
				}
				break;
			case 6:
				_localctx = new IdModuloAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 183;
				Match(ID);
				State = 184;
				Match(T__12);
				State = 185;
				expression(0);
				}
				break;
			case 7:
				_localctx = new IdPostIncrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 186;
				Match(ID);
				State = 187;
				Match(T__13);
				}
				break;
			case 8:
				_localctx = new IdPostDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 188;
				Match(ID);
				State = 189;
				Match(T__14);
				}
				break;
			case 9:
				_localctx = new IdPreDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 190;
				Match(T__14);
				State = 191;
				Match(ID);
				}
				break;
			case 10:
				_localctx = new IdPreIncrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 192;
				Match(T__13);
				State = 193;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public DeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationAssignmentContext declarationAssignment() {
		DeclarationAssignmentContext _localctx = new DeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_declarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196;
			variableDeclaration();
			State = 197;
			Match(T__7);
			State = 198;
			predicate(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleDeclarationContext tupleDeclaration() {
			return GetRuleContext<TupleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleAssignmentContext tupleAssignment() {
		TupleAssignmentContext _localctx = new TupleAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_tupleAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 200;
			tupleDeclaration();
			State = 201;
			Match(T__7);
			State = 202;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public TupleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDeclarationContext tupleDeclaration() {
		TupleDeclarationContext _localctx = new TupleDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_tupleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 204;
			Match(T__2);
			State = 205;
			variableDeclarationFormat();
			State = 210;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 206;
				Match(T__3);
				State = 207;
				variableDeclarationFormat();
				}
				}
				State = 212;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 213;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreIncrementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreIncrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPreIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPreIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public MultiplicationContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplication(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AdditionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAddition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddition(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ModuloContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ModuloContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		public VariableAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostDecrementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostDecrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPostDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPostDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseUnaryNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BitwiseUnaryNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseUnaryNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseUnaryNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseUnaryNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RightShiftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public RightShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftShiftContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LeftShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitLeftShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SubtractionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public SubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YALGrammerParser.STRING, 0); }
		public StringLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DivisionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public DivisionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitDivision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDivision(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PostIncrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPostIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPostIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PreDecrementContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PreDecrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPreDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPreDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPreDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_NUMBER() { return GetToken(YALGrammerParser.SIGNED_NUMBER, 0); }
		public NumberLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				_localctx = new PreIncrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 216;
				Match(T__13);
				State = 217;
				expression(21);
				}
				break;
			case 2:
				{
				_localctx = new PreDecrementContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				Match(T__14);
				State = 219;
				expression(20);
				}
				break;
			case 3:
				{
				_localctx = new BitwiseUnaryNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(T__15);
				State = 221;
				expression(19);
				}
				break;
			case 4:
				{
				_localctx = new VariableAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 222;
				simpleAssignment();
				}
				break;
			case 5:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 223;
				Match(ID);
				}
				break;
			case 6:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				functionCall();
				}
				break;
			case 7:
				{
				_localctx = new NumberLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 225;
				Match(SIGNED_NUMBER);
				}
				break;
			case 8:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 226;
				Match(STRING);
				}
				break;
			case 9:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 227;
				Match(T__2);
				State = 228;
				expression(0);
				State = 229;
				Match(T__4);
				}
				break;
			case 10:
				{
				_localctx = new ArrayLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 231;
				Match(T__5);
				State = 240;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3949445767086152L) != 0) {
					{
					State = 232;
					expression(0);
					State = 237;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 233;
						Match(T__3);
						State = 234;
						expression(0);
						}
						}
						State = 239;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 242;
				Match(T__6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 284;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 282;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 245;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 246;
						Match(T__16);
						State = 247;
						expression(19);
						}
						break;
					case 2:
						{
						_localctx = new DivisionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 248;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 249;
						Match(T__17);
						State = 250;
						expression(18);
						}
						break;
					case 3:
						{
						_localctx = new ModuloContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 251;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 252;
						Match(T__18);
						State = 253;
						expression(17);
						}
						break;
					case 4:
						{
						_localctx = new AdditionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 254;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 255;
						Match(T__19);
						State = 256;
						expression(16);
						}
						break;
					case 5:
						{
						_localctx = new SubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 257;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 258;
						Match(T__20);
						State = 259;
						expression(15);
						}
						break;
					case 6:
						{
						_localctx = new LeftShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 260;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 261;
						Match(T__21);
						State = 262;
						expression(14);
						}
						break;
					case 7:
						{
						_localctx = new RightShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 263;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 264;
						Match(T__22);
						State = 265;
						expression(13);
						}
						break;
					case 8:
						{
						_localctx = new BitwiseAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 266;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 267;
						Match(T__23);
						State = 268;
						expression(12);
						}
						break;
					case 9:
						{
						_localctx = new BitwiseXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 269;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 270;
						Match(T__24);
						State = 271;
						expression(11);
						}
						break;
					case 10:
						{
						_localctx = new BitwiseOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 272;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 273;
						Match(T__25);
						State = 274;
						expression(10);
						}
						break;
					case 11:
						{
						_localctx = new BitwiseNotContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 275;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 276;
						Match(T__15);
						State = 277;
						expression(9);
						}
						break;
					case 12:
						{
						_localctx = new PostIncrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 278;
						if (!(Precpred(Context, 23))) throw new FailedPredicateException(this, "Precpred(Context, 23)");
						State = 279;
						Match(T__13);
						}
						break;
					case 13:
						{
						_localctx = new PostDecrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 280;
						if (!(Precpred(Context, 22))) throw new FailedPredicateException(this, "Precpred(Context, 22)");
						State = 281;
						Match(T__14);
						}
						break;
					}
					} 
				}
				State = 286;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualInputParamsContext actualInputParams() {
			return GetRuleContext<ActualInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(YALGrammerParser.AWAIT, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 287;
				Match(AWAIT);
				}
			}

			State = 290;
			Match(ID);
			State = 291;
			Match(T__2);
			State = 292;
			actualInputParams();
			State = 293;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualInputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ActualInputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualInputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterActualInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitActualInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualInputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualInputParamsContext actualInputParams() {
		ActualInputParamsContext _localctx = new ActualInputParamsContext(Context, State);
		EnterRule(_localctx, 36, RULE_actualInputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 3949445767086152L) != 0) {
				{
				State = 295;
				expression(0);
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 296;
					Match(T__3);
					State = 297;
					expression(0);
					}
					}
					State = 302;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
	 
		public PredicateContext() { }
		public virtual void CopyFrom(PredicateContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public NotContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public LessThanContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterLessThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitLessThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualsContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public EqualsContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public OrContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesizedPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public ParenthesizedPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LessThanOrEqualContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public LessThanOrEqualContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterLessThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitLessThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLessThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public GreaterThanContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterGreaterThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitGreaterThan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThan(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(YALGrammerParser.BOOLEAN, 0); }
		public BooleanLiteralContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public AndContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GreaterThanOrEqualContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public GreaterThanOrEqualContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterGreaterThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitGreaterThanOrEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGreaterThanOrEqual(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotEqualsContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext[] predicate() {
			return GetRuleContexts<PredicateContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate(int i) {
			return GetRuleContext<PredicateContext>(i);
		}
		public NotEqualsContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNotEquals(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotEquals(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionPredicateContext : PredicateContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionPredicateContext(PredicateContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterExpressionPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitExpressionPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PredicateContext _localctx = new PredicateContext(Context, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 38;
		EnterRecursionRule(_localctx, 38, RULE_predicate, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 314;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 306;
				Match(T__26);
				State = 307;
				predicate(12);
				}
				break;
			case 2:
				{
				_localctx = new ParenthesizedPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 308;
				Match(T__2);
				State = 309;
				predicate(0);
				State = 310;
				Match(T__4);
				}
				break;
			case 3:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 312;
				Match(BOOLEAN);
				}
				break;
			case 4:
				{
				_localctx = new ExpressionPredicateContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 313;
				expression(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 342;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 340;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new AndContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 316;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 317;
						Match(T__27);
						State = 318;
						predicate(12);
						}
						break;
					case 2:
						{
						_localctx = new OrContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 319;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 320;
						Match(T__28);
						State = 321;
						predicate(11);
						}
						break;
					case 3:
						{
						_localctx = new LessThanContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 322;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 323;
						Match(T__29);
						State = 324;
						predicate(10);
						}
						break;
					case 4:
						{
						_localctx = new LessThanOrEqualContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 325;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 326;
						Match(T__30);
						State = 327;
						predicate(9);
						}
						break;
					case 5:
						{
						_localctx = new GreaterThanContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 328;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 329;
						Match(T__31);
						State = 330;
						predicate(8);
						}
						break;
					case 6:
						{
						_localctx = new GreaterThanOrEqualContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 331;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 332;
						Match(T__32);
						State = 333;
						predicate(7);
						}
						break;
					case 7:
						{
						_localctx = new EqualsContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 334;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 335;
						Match(T__33);
						State = 336;
						predicate(6);
						}
						break;
					case 8:
						{
						_localctx = new NotEqualsContext(new PredicateContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_predicate);
						State = 337;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 338;
						Match(T__34);
						State = 339;
						predicate(5);
						}
						break;
					}
					} 
				}
				State = 344;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 345;
			Match(T__35);
			State = 346;
			Match(T__2);
			State = 347;
			predicate(0);
			State = 348;
			Match(T__4);
			State = 349;
			statementBlock();
			State = 353;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__36) {
				{
				{
				State = 350;
				elseIfStatement();
				}
				}
				State = 355;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 357;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__37) {
				{
				State = 356;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 359;
			Match(T__36);
			State = 360;
			Match(T__2);
			State = 361;
			predicate(0);
			State = 362;
			Match(T__4);
			State = 363;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 365;
			Match(T__37);
			State = 366;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 368;
			Match(T__38);
			State = 369;
			Match(T__2);
			State = 370;
			predicate(0);
			State = 371;
			Match(T__4);
			State = 372;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 48, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			Match(T__39);
			State = 375;
			Match(T__2);
			State = 376;
			declarationAssignment();
			State = 377;
			Match(T__0);
			State = 378;
			predicate(0);
			State = 379;
			Match(T__0);
			State = 380;
			assignment();
			State = 381;
			Match(T__4);
			State = 382;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 19: return predicate_sempred((PredicateContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 18);
		case 1: return Precpred(Context, 17);
		case 2: return Precpred(Context, 16);
		case 3: return Precpred(Context, 15);
		case 4: return Precpred(Context, 14);
		case 5: return Precpred(Context, 13);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 23);
		case 12: return Precpred(Context, 22);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 11);
		case 14: return Precpred(Context, 10);
		case 15: return Precpred(Context, 9);
		case 16: return Precpred(Context, 8);
		case 17: return Precpred(Context, 7);
		case 18: return Precpred(Context, 6);
		case 19: return Precpred(Context, 5);
		case 20: return Precpred(Context, 4);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,385,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,5,0,53,8,0,10,0,12,0,56,9,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,1,1,2,3,2,66,8,2,1,2,1,2,1,2,3,2,71,8,2,1,2,3,2,
		74,8,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,5,3,83,8,3,10,3,12,3,86,9,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,5,4,95,8,4,10,4,12,4,98,9,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,5,5,5,107,8,5,10,5,12,5,110,9,5,1,5,1,5,1,6,1,6,1,6,3,6,117,8,6,1,
		7,1,7,1,7,1,7,1,7,3,7,124,8,7,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,1,9,1,9,
		3,9,135,8,9,1,10,1,10,1,10,1,10,1,10,1,10,5,10,143,8,10,10,10,12,10,146,
		9,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,5,10,155,8,10,10,10,12,10,158,
		9,10,3,10,160,8,10,1,10,1,10,1,11,1,11,1,11,3,11,167,8,11,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,195,8,12,1,13,1,13,
		1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,209,8,15,10,15,
		12,15,212,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,5,16,236,8,16,10,
		16,12,16,239,9,16,3,16,241,8,16,1,16,3,16,244,8,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
		1,16,1,16,1,16,1,16,1,16,5,16,283,8,16,10,16,12,16,286,9,16,1,17,3,17,
		289,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,299,8,18,10,18,12,
		18,302,9,18,3,18,304,8,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,315,8,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,
		19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,341,
		8,19,10,19,12,19,344,9,19,1,20,1,20,1,20,1,20,1,20,1,20,5,20,352,8,20,
		10,20,12,20,355,9,20,1,20,3,20,358,8,20,1,21,1,21,1,21,1,21,1,21,1,21,
		1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,24,1,24,0,2,32,38,25,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,0,0,431,0,54,1,0,0,0,2,59,1,
		0,0,0,4,65,1,0,0,0,6,77,1,0,0,0,8,89,1,0,0,0,10,101,1,0,0,0,12,116,1,0,
		0,0,14,123,1,0,0,0,16,127,1,0,0,0,18,134,1,0,0,0,20,136,1,0,0,0,22,166,
		1,0,0,0,24,194,1,0,0,0,26,196,1,0,0,0,28,200,1,0,0,0,30,204,1,0,0,0,32,
		243,1,0,0,0,34,288,1,0,0,0,36,303,1,0,0,0,38,314,1,0,0,0,40,345,1,0,0,
		0,42,359,1,0,0,0,44,365,1,0,0,0,46,368,1,0,0,0,48,374,1,0,0,0,50,53,3,
		2,1,0,51,53,3,4,2,0,52,50,1,0,0,0,52,51,1,0,0,0,53,56,1,0,0,0,54,52,1,
		0,0,0,54,55,1,0,0,0,55,57,1,0,0,0,56,54,1,0,0,0,57,58,5,0,0,1,58,1,1,0,
		0,0,59,60,5,45,0,0,60,61,5,41,0,0,61,62,5,50,0,0,62,63,5,1,0,0,63,3,1,
		0,0,0,64,66,5,42,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,68,5,
		50,0,0,68,70,5,2,0,0,69,71,3,6,3,0,70,69,1,0,0,0,70,71,1,0,0,0,71,73,1,
		0,0,0,72,74,3,8,4,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,0,0,0,75,76,3,
		10,5,0,76,5,1,0,0,0,77,78,5,47,0,0,78,79,5,3,0,0,79,84,3,18,9,0,80,81,
		5,4,0,0,81,83,3,18,9,0,82,80,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,85,
		1,0,0,0,85,87,1,0,0,0,86,84,1,0,0,0,87,88,5,5,0,0,88,7,1,0,0,0,89,90,5,
		48,0,0,90,91,5,3,0,0,91,96,3,18,9,0,92,93,5,4,0,0,93,95,3,18,9,0,94,92,
		1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,97,99,1,0,0,0,98,96,
		1,0,0,0,99,100,5,5,0,0,100,9,1,0,0,0,101,108,5,6,0,0,102,107,3,12,6,0,
		103,104,3,14,7,0,104,105,5,1,0,0,105,107,1,0,0,0,106,102,1,0,0,0,106,103,
		1,0,0,0,107,110,1,0,0,0,108,106,1,0,0,0,108,109,1,0,0,0,109,111,1,0,0,
		0,110,108,1,0,0,0,111,112,5,7,0,0,112,11,1,0,0,0,113,117,3,40,20,0,114,
		117,3,46,23,0,115,117,3,48,24,0,116,113,1,0,0,0,116,114,1,0,0,0,116,115,
		1,0,0,0,117,13,1,0,0,0,118,124,3,16,8,0,119,124,3,20,10,0,120,124,3,22,
		11,0,121,124,3,34,17,0,122,124,5,44,0,0,123,118,1,0,0,0,123,119,1,0,0,
		0,123,120,1,0,0,0,123,121,1,0,0,0,123,122,1,0,0,0,124,15,1,0,0,0,125,128,
		3,18,9,0,126,128,3,30,15,0,127,125,1,0,0,0,127,126,1,0,0,0,128,17,1,0,
		0,0,129,130,5,45,0,0,130,131,5,41,0,0,131,135,5,50,0,0,132,133,5,45,0,
		0,133,135,5,50,0,0,134,129,1,0,0,0,134,132,1,0,0,0,135,19,1,0,0,0,136,
		137,5,46,0,0,137,138,5,50,0,0,138,159,5,6,0,0,139,144,5,50,0,0,140,141,
		5,4,0,0,141,143,5,50,0,0,142,140,1,0,0,0,143,146,1,0,0,0,144,142,1,0,0,
		0,144,145,1,0,0,0,145,160,1,0,0,0,146,144,1,0,0,0,147,148,5,50,0,0,148,
		149,5,8,0,0,149,156,5,53,0,0,150,151,5,4,0,0,151,152,5,50,0,0,152,153,
		5,8,0,0,153,155,5,53,0,0,154,150,1,0,0,0,155,158,1,0,0,0,156,154,1,0,0,
		0,156,157,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,159,139,1,0,0,0,159,
		147,1,0,0,0,160,161,1,0,0,0,161,162,5,7,0,0,162,21,1,0,0,0,163,167,3,24,
		12,0,164,167,3,26,13,0,165,167,3,28,14,0,166,163,1,0,0,0,166,164,1,0,0,
		0,166,165,1,0,0,0,167,23,1,0,0,0,168,169,5,50,0,0,169,170,5,8,0,0,170,
		195,3,38,19,0,171,172,5,50,0,0,172,173,5,9,0,0,173,195,3,32,16,0,174,175,
		5,50,0,0,175,176,5,10,0,0,176,195,3,32,16,0,177,178,5,50,0,0,178,179,5,
		11,0,0,179,195,3,32,16,0,180,181,5,50,0,0,181,182,5,12,0,0,182,195,3,32,
		16,0,183,184,5,50,0,0,184,185,5,13,0,0,185,195,3,32,16,0,186,187,5,50,
		0,0,187,195,5,14,0,0,188,189,5,50,0,0,189,195,5,15,0,0,190,191,5,15,0,
		0,191,195,5,50,0,0,192,193,5,14,0,0,193,195,5,50,0,0,194,168,1,0,0,0,194,
		171,1,0,0,0,194,174,1,0,0,0,194,177,1,0,0,0,194,180,1,0,0,0,194,183,1,
		0,0,0,194,186,1,0,0,0,194,188,1,0,0,0,194,190,1,0,0,0,194,192,1,0,0,0,
		195,25,1,0,0,0,196,197,3,16,8,0,197,198,5,8,0,0,198,199,3,38,19,0,199,
		27,1,0,0,0,200,201,3,30,15,0,201,202,5,8,0,0,202,203,3,32,16,0,203,29,
		1,0,0,0,204,205,5,3,0,0,205,210,3,18,9,0,206,207,5,4,0,0,207,209,3,18,
		9,0,208,206,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,
		213,1,0,0,0,212,210,1,0,0,0,213,214,5,5,0,0,214,31,1,0,0,0,215,216,6,16,
		-1,0,216,217,5,14,0,0,217,244,3,32,16,21,218,219,5,15,0,0,219,244,3,32,
		16,20,220,221,5,16,0,0,221,244,3,32,16,19,222,244,3,24,12,0,223,244,5,
		50,0,0,224,244,3,34,17,0,225,244,5,51,0,0,226,244,5,49,0,0,227,228,5,3,
		0,0,228,229,3,32,16,0,229,230,5,5,0,0,230,244,1,0,0,0,231,240,5,6,0,0,
		232,237,3,32,16,0,233,234,5,4,0,0,234,236,3,32,16,0,235,233,1,0,0,0,236,
		239,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,241,1,0,0,0,239,237,1,
		0,0,0,240,232,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,242,244,5,7,0,0,
		243,215,1,0,0,0,243,218,1,0,0,0,243,220,1,0,0,0,243,222,1,0,0,0,243,223,
		1,0,0,0,243,224,1,0,0,0,243,225,1,0,0,0,243,226,1,0,0,0,243,227,1,0,0,
		0,243,231,1,0,0,0,244,284,1,0,0,0,245,246,10,18,0,0,246,247,5,17,0,0,247,
		283,3,32,16,19,248,249,10,17,0,0,249,250,5,18,0,0,250,283,3,32,16,18,251,
		252,10,16,0,0,252,253,5,19,0,0,253,283,3,32,16,17,254,255,10,15,0,0,255,
		256,5,20,0,0,256,283,3,32,16,16,257,258,10,14,0,0,258,259,5,21,0,0,259,
		283,3,32,16,15,260,261,10,13,0,0,261,262,5,22,0,0,262,283,3,32,16,14,263,
		264,10,12,0,0,264,265,5,23,0,0,265,283,3,32,16,13,266,267,10,11,0,0,267,
		268,5,24,0,0,268,283,3,32,16,12,269,270,10,10,0,0,270,271,5,25,0,0,271,
		283,3,32,16,11,272,273,10,9,0,0,273,274,5,26,0,0,274,283,3,32,16,10,275,
		276,10,8,0,0,276,277,5,16,0,0,277,283,3,32,16,9,278,279,10,23,0,0,279,
		283,5,14,0,0,280,281,10,22,0,0,281,283,5,15,0,0,282,245,1,0,0,0,282,248,
		1,0,0,0,282,251,1,0,0,0,282,254,1,0,0,0,282,257,1,0,0,0,282,260,1,0,0,
		0,282,263,1,0,0,0,282,266,1,0,0,0,282,269,1,0,0,0,282,272,1,0,0,0,282,
		275,1,0,0,0,282,278,1,0,0,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,
		0,0,0,284,285,1,0,0,0,285,33,1,0,0,0,286,284,1,0,0,0,287,289,5,43,0,0,
		288,287,1,0,0,0,288,289,1,0,0,0,289,290,1,0,0,0,290,291,5,50,0,0,291,292,
		5,3,0,0,292,293,3,36,18,0,293,294,5,5,0,0,294,35,1,0,0,0,295,300,3,32,
		16,0,296,297,5,4,0,0,297,299,3,32,16,0,298,296,1,0,0,0,299,302,1,0,0,0,
		300,298,1,0,0,0,300,301,1,0,0,0,301,304,1,0,0,0,302,300,1,0,0,0,303,295,
		1,0,0,0,303,304,1,0,0,0,304,37,1,0,0,0,305,306,6,19,-1,0,306,307,5,27,
		0,0,307,315,3,38,19,12,308,309,5,3,0,0,309,310,3,38,19,0,310,311,5,5,0,
		0,311,315,1,0,0,0,312,315,5,54,0,0,313,315,3,32,16,0,314,305,1,0,0,0,314,
		308,1,0,0,0,314,312,1,0,0,0,314,313,1,0,0,0,315,342,1,0,0,0,316,317,10,
		11,0,0,317,318,5,28,0,0,318,341,3,38,19,12,319,320,10,10,0,0,320,321,5,
		29,0,0,321,341,3,38,19,11,322,323,10,9,0,0,323,324,5,30,0,0,324,341,3,
		38,19,10,325,326,10,8,0,0,326,327,5,31,0,0,327,341,3,38,19,9,328,329,10,
		7,0,0,329,330,5,32,0,0,330,341,3,38,19,8,331,332,10,6,0,0,332,333,5,33,
		0,0,333,341,3,38,19,7,334,335,10,5,0,0,335,336,5,34,0,0,336,341,3,38,19,
		6,337,338,10,4,0,0,338,339,5,35,0,0,339,341,3,38,19,5,340,316,1,0,0,0,
		340,319,1,0,0,0,340,322,1,0,0,0,340,325,1,0,0,0,340,328,1,0,0,0,340,331,
		1,0,0,0,340,334,1,0,0,0,340,337,1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,
		0,342,343,1,0,0,0,343,39,1,0,0,0,344,342,1,0,0,0,345,346,5,36,0,0,346,
		347,5,3,0,0,347,348,3,38,19,0,348,349,5,5,0,0,349,353,3,10,5,0,350,352,
		3,42,21,0,351,350,1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,
		0,0,354,357,1,0,0,0,355,353,1,0,0,0,356,358,3,44,22,0,357,356,1,0,0,0,
		357,358,1,0,0,0,358,41,1,0,0,0,359,360,5,37,0,0,360,361,5,3,0,0,361,362,
		3,38,19,0,362,363,5,5,0,0,363,364,3,10,5,0,364,43,1,0,0,0,365,366,5,38,
		0,0,366,367,3,10,5,0,367,45,1,0,0,0,368,369,5,39,0,0,369,370,5,3,0,0,370,
		371,3,38,19,0,371,372,5,5,0,0,372,373,3,10,5,0,373,47,1,0,0,0,374,375,
		5,40,0,0,375,376,5,3,0,0,376,377,3,26,13,0,377,378,5,1,0,0,378,379,3,38,
		19,0,379,380,5,1,0,0,380,381,3,22,11,0,381,382,5,5,0,0,382,383,3,10,5,
		0,383,49,1,0,0,0,32,52,54,65,70,73,84,96,106,108,116,123,127,134,144,156,
		159,166,194,210,237,240,243,282,284,288,300,303,314,340,342,353,357
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
