//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/source/repos/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, EXTERNAL=19, ASYNC=20, AWAIT=21, RETURN=22, TYPE=23, IN=24, 
		OUT=25, STRING=26, BOOLEAN=27, ID=28, POSITIVE_NUMBER=29, FLOAT=30, TIMES=31, 
		DIV=32, MOD=33, PLUS=34, MINUS=35, LSHIFT=36, RSHIFT=37, INCREMENT=38, 
		DECREMENT=39, LESS_THAN=40, LESS_THAN_OR_EQUAL=41, GREATER_THAN=42, GREATER_THAN_OR_EQUAL=43, 
		EQUALS=44, NOT_EQUAL=45, EQUAL=46, PLUS_EQUAL=47, MINUS_EQUAL=48, MULTIPLY_EQUAL=49, 
		DIVIDE_EQUAL=50, MODULO_EQUAL=51, BITWISE_NOT=52, LBRACKET=53, RBRACKET=54, 
		WHITESPACE=55, NEWLINE=56, COMMENT=57, LINE_COMMENT=58;
	public const int
		RULE_program = 0, RULE_globalVariableDeclaration = 1, RULE_externalFunctionDeclaration = 2, 
		RULE_functionDeclaration = 3, RULE_formalInputParams = 4, RULE_formalOutputParams = 5, 
		RULE_statementBlock = 6, RULE_blockStatement = 7, RULE_singleStatement = 8, 
		RULE_variableDeclaration = 9, RULE_variableDeclarationFormat = 10, RULE_assignment = 11, 
		RULE_simpleAssignment = 12, RULE_declarationAssignment = 13, RULE_tupleAssignment = 14, 
		RULE_tupleDeclaration = 15, RULE_expression = 16, RULE_functionCall = 17, 
		RULE_actualInputParams = 18, RULE_ifStatement = 19, RULE_elseIfStatement = 20, 
		RULE_elseStatement = 21, RULE_whileStatement = 22, RULE_forStatement = 23, 
		RULE_identifier = 24;
	public static readonly string[] ruleNames = {
		"program", "globalVariableDeclaration", "externalFunctionDeclaration", 
		"functionDeclaration", "formalInputParams", "formalOutputParams", "statementBlock", 
		"blockStatement", "singleStatement", "variableDeclaration", "variableDeclarationFormat", 
		"assignment", "simpleAssignment", "declarationAssignment", "tupleAssignment", 
		"tupleDeclaration", "expression", "functionCall", "actualInputParams", 
		"ifStatement", "elseIfStatement", "elseStatement", "whileStatement", "forStatement", 
		"identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "','", "')'", "'{'", "'}'", "'!'", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'if'", "'else if'", "'else'", "'while'", "'for'", 
		"'external'", "'async'", "'await'", "'return'", null, "'in'", "'out'", 
		null, null, null, null, null, "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", 
		"'>>'", "'++'", "'--'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'='", "'+='", "'-='", "'*='", "'\\='", "'%='", "'~'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "EXTERNAL", "ASYNC", "AWAIT", 
		"RETURN", "TYPE", "IN", "OUT", "STRING", "BOOLEAN", "ID", "POSITIVE_NUMBER", 
		"FLOAT", "TIMES", "DIV", "MOD", "PLUS", "MINUS", "LSHIFT", "RSHIFT", "INCREMENT", 
		"DECREMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
		"EQUALS", "NOT_EQUAL", "EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
		"DIVIDE_EQUAL", "MODULO_EQUAL", "BITWISE_NOT", "LBRACKET", "RBRACKET", 
		"WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YALGrammerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YALGrammerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(YALGrammerParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExternalFunctionDeclarationContext[] externalFunctionDeclaration() {
			return GetRuleContexts<ExternalFunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExternalFunctionDeclarationContext externalFunctionDeclaration(int i) {
			return GetRuleContext<ExternalFunctionDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext[] globalVariableDeclaration() {
			return GetRuleContexts<GlobalVariableDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableDeclarationContext globalVariableDeclaration(int i) {
			return GetRuleContext<GlobalVariableDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext[] functionDeclaration() {
			return GetRuleContexts<FunctionDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDeclarationContext functionDeclaration(int i) {
			return GetRuleContext<FunctionDeclarationContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 278396928L) != 0) {
				{
				State = 53;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case EXTERNAL:
					{
					State = 50;
					externalFunctionDeclaration();
					}
					break;
				case TYPE:
					{
					State = 51;
					globalVariableDeclaration();
					}
					break;
				case ASYNC:
				case ID:
					{
					State = 52;
					functionDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 58;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(YALGrammerParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(YALGrammerParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER() { return GetToken(YALGrammerParser.POSITIVE_NUMBER, 0); }
		public GlobalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitGlobalVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableDeclarationContext globalVariableDeclaration() {
		GlobalVariableDeclarationContext _localctx = new GlobalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVariableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(TYPE);
			State = 66;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACKET) {
				{
				State = 61;
				Match(LBRACKET);
				State = 63;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POSITIVE_NUMBER) {
					{
					State = 62;
					Match(POSITIVE_NUMBER);
					}
				}

				State = 65;
				Match(RBRACKET);
				}
			}

			State = 68;
			Match(ID);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL) {
				{
				State = 69;
				Match(EQUAL);
				State = 70;
				expression(0);
				}
			}

			State = 73;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternalFunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTERNAL() { return GetToken(YALGrammerParser.EXTERNAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(YALGrammerParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YALGrammerParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(YALGrammerParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalInputParamsContext formalInputParams() {
			return GetRuleContext<FormalInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalOutputParamsContext formalOutputParams() {
			return GetRuleContext<FormalOutputParamsContext>(0);
		}
		public ExternalFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externalFunctionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterExternalFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitExternalFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExternalFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExternalFunctionDeclarationContext externalFunctionDeclaration() {
		ExternalFunctionDeclarationContext _localctx = new ExternalFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_externalFunctionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			Match(EXTERNAL);
			State = 76;
			Match(LESS_THAN);
			State = 77;
			Match(STRING);
			State = 78;
			Match(GREATER_THAN);
			State = 79;
			Match(ID);
			State = 80;
			Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 81;
				formalInputParams();
				}
			}

			State = 85;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 84;
				formalOutputParams();
				}
			}

			State = 87;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASYNC() { return GetToken(YALGrammerParser.ASYNC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FormalInputParamsContext formalInputParams() {
			return GetRuleContext<FormalInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FormalOutputParamsContext formalOutputParams() {
			return GetRuleContext<FormalOutputParamsContext>(0);
		}
		public FunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDeclarationContext functionDeclaration() {
		FunctionDeclarationContext _localctx = new FunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_functionDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASYNC) {
				{
				State = 89;
				Match(ASYNC);
				}
			}

			State = 92;
			Match(ID);
			State = 93;
			Match(T__1);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 94;
				formalInputParams();
				}
			}

			State = 98;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUT) {
				{
				State = 97;
				formalOutputParams();
				}
			}

			State = 100;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalInputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(YALGrammerParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public FormalInputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalInputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalInputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalInputParamsContext formalInputParams() {
		FormalInputParamsContext _localctx = new FormalInputParamsContext(Context, State);
		EnterRule(_localctx, 8, RULE_formalInputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 102;
			Match(IN);
			State = 103;
			Match(T__2);
			State = 104;
			variableDeclarationFormat();
			State = 109;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 105;
				Match(T__3);
				State = 106;
				variableDeclarationFormat();
				}
				}
				State = 111;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 112;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalOutputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT() { return GetToken(YALGrammerParser.OUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public FormalOutputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalOutputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFormalOutputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalOutputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalOutputParamsContext formalOutputParams() {
		FormalOutputParamsContext _localctx = new FormalOutputParamsContext(Context, State);
		EnterRule(_localctx, 10, RULE_formalOutputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			Match(OUT);
			State = 115;
			Match(T__2);
			State = 116;
			variableDeclarationFormat();
			State = 121;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 117;
				Match(T__3);
				State = 118;
				variableDeclarationFormat();
				}
				}
				State = 123;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 124;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext[] singleStatement() {
			return GetRuleContexts<SingleStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleStatementContext singleStatement(int i) {
			return GetRuleContext<SingleStatementContext>(i);
		}
		public StatementBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStatementBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatementBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementBlockContext statementBlock() {
		StatementBlockContext _localctx = new StatementBlockContext(Context, State);
		EnterRule(_localctx, 12, RULE_statementBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 126;
			Match(T__5);
			State = 136;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 824917245960L) != 0) {
				{
				State = 134;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__13:
				case T__16:
				case T__17:
					{
					State = 127;
					blockStatement();
					}
					break;
				case T__2:
				case AWAIT:
				case RETURN:
				case TYPE:
				case ID:
				case INCREMENT:
				case DECREMENT:
					{
					State = 128;
					singleStatement();
					State = 130;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 129;
						Match(T__0);
						}
						}
						State = 132;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==T__0 );
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 139;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 14, RULE_blockStatement);
		try {
			State = 144;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__13:
				EnterOuterAlt(_localctx, 1);
				{
				State = 141;
				ifStatement();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 2);
				{
				State = 142;
				whileStatement();
				}
				break;
			case T__17:
				EnterOuterAlt(_localctx, 3);
				{
				State = 143;
				forStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(YALGrammerParser.RETURN, 0); }
		public SingleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSingleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSingleStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SingleStatementContext singleStatement() {
		SingleStatementContext _localctx = new SingleStatementContext(Context, State);
		EnterRule(_localctx, 16, RULE_singleStatement);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 146;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 147;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 148;
				functionCall();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 149;
				Match(RETURN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
	 
		public VariableDeclarationContext() { }
		public virtual void CopyFrom(VariableDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TupleVariableDeclarationContext : VariableDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleDeclarationContext tupleDeclaration() {
			return GetRuleContext<TupleDeclarationContext>(0);
		}
		public TupleVariableDeclarationContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleVariableDeclarationFormatContext : VariableDeclarationContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat() {
			return GetRuleContext<VariableDeclarationFormatContext>(0);
		}
		public SimpleVariableDeclarationFormatContext(VariableDeclarationContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleVariableDeclarationFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleVariableDeclarationFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableDeclarationFormat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclaration);
		try {
			State = 154;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TYPE:
				_localctx = new SimpleVariableDeclarationFormatContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 152;
				variableDeclarationFormat();
				}
				break;
			case T__2:
				_localctx = new TupleVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 153;
				tupleDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationFormatContext : ParserRuleContext {
		public VariableDeclarationFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarationFormat; } }
	 
		public VariableDeclarationFormatContext() { }
		public virtual void CopyFrom(VariableDeclarationFormatContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(YALGrammerParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(YALGrammerParser.RBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER() { return GetToken(YALGrammerParser.POSITIVE_NUMBER, 0); }
		public ArrayDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleVariableDeclarationContext : VariableDeclarationFormatContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE() { return GetToken(YALGrammerParser.TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public SimpleVariableDeclarationContext(VariableDeclarationFormatContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationFormatContext variableDeclarationFormat() {
		VariableDeclarationFormatContext _localctx = new VariableDeclarationFormatContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDeclarationFormat);
		int _la;
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				_localctx = new ArrayDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 156;
				Match(TYPE);
				State = 157;
				Match(LBRACKET);
				State = 159;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==POSITIVE_NUMBER) {
					{
					State = 158;
					Match(POSITIVE_NUMBER);
					}
				}

				State = 161;
				Match(RBRACKET);
				State = 162;
				Match(ID);
				}
				break;
			case 2:
				_localctx = new SimpleVariableDeclarationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 163;
				Match(TYPE);
				State = 164;
				Match(ID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TupleAssignmentContext tupleAssignment() {
			return GetRuleContext<TupleAssignmentContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_assignment);
		try {
			State = 170;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				simpleAssignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 168;
				declarationAssignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 169;
				tupleAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleAssignmentContext : ParserRuleContext {
		public SimpleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleAssignment; } }
	 
		public SimpleAssignmentContext() { }
		public virtual void CopyFrom(SimpleAssignmentContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_EQUAL() { return GetToken(YALGrammerParser.PLUS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_EQUAL() { return GetToken(YALGrammerParser.MINUS_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPLY_EQUAL() { return GetToken(YALGrammerParser.MULTIPLY_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIVIDE_EQUAL() { return GetToken(YALGrammerParser.DIVIDE_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULO_EQUAL() { return GetToken(YALGrammerParser.MODULO_EQUAL, 0); }
		public IdAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPreIncrementDecrementAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public IdPreIncrementDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPreIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPreIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPreIncrementDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdPostIncrementDecrementAssignmentContext : SimpleAssignmentContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public IdPostIncrementDecrementAssignmentContext(SimpleAssignmentContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIdPostIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIdPostIncrementDecrementAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdPostIncrementDecrementAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SimpleAssignmentContext simpleAssignment() {
		SimpleAssignmentContext _localctx = new SimpleAssignmentContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleAssignment);
		int _la;
		try {
			State = 181;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				_localctx = new IdAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 172;
				identifier();
				State = 173;
				((IdAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4433230883192832L) != 0) ) {
					((IdAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 174;
				expression(0);
				}
				break;
			case 2:
				_localctx = new IdPreIncrementDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 176;
				((IdPreIncrementDecrementAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
					((IdPreIncrementDecrementAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 177;
				identifier();
				}
				break;
			case 3:
				_localctx = new IdPostIncrementDecrementAssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 178;
				identifier();
				State = 179;
				((IdPostIncrementDecrementAssignmentContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INCREMENT || _la==DECREMENT) ) {
					((IdPostIncrementDecrementAssignmentContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitDeclarationAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclarationAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationAssignmentContext declarationAssignment() {
		DeclarationAssignmentContext _localctx = new DeclarationAssignmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_declarationAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			variableDeclaration();
			State = 184;
			Match(EQUAL);
			State = 185;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TupleDeclarationContext tupleDeclaration() {
			return GetRuleContext<TupleDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL() { return GetToken(YALGrammerParser.EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TupleAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleAssignmentContext tupleAssignment() {
		TupleAssignmentContext _localctx = new TupleAssignmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_tupleAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			tupleDeclaration();
			State = 188;
			Match(EQUAL);
			State = 189;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext[] variableDeclarationFormat() {
			return GetRuleContexts<VariableDeclarationFormatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationFormatContext variableDeclarationFormat(int i) {
			return GetRuleContext<VariableDeclarationFormatContext>(i);
		}
		public TupleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterTupleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitTupleDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTupleDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TupleDeclarationContext tupleDeclaration() {
		TupleDeclarationContext _localctx = new TupleDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_tupleDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 191;
			Match(T__2);
			State = 192;
			variableDeclarationFormat();
			State = 197;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 193;
				Match(T__3);
				State = 194;
				variableDeclarationFormat();
				}
				}
				State = 199;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 200;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesizedExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public VariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariable(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public OrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PrefixUnaryContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(YALGrammerParser.BITWISE_NOT, 0); }
		public PrefixUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPrefixUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPrefixUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrefixUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditionSubtractionContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS() { return GetToken(YALGrammerParser.PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public AdditionSubtractionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAdditionSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAdditionSubtraction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditionSubtraction(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FloatLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(YALGrammerParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public FloatLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(YALGrammerParser.BOOLEAN, 0); }
		public BooleanLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class VariableAssignmentContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleAssignmentContext simpleAssignment() {
			return GetRuleContext<SimpleAssignmentContext>(0);
		}
		public VariableAssignmentContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionCallExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public FunctionCallExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCallExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCallExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public NotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LeftRightShiftContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LSHIFT() { return GetToken(YALGrammerParser.LSHIFT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RSHIFT() { return GetToken(YALGrammerParser.RSHIFT, 0); }
		public LeftRightShiftContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterLeftRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitLeftRightShift(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLeftRightShift(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(YALGrammerParser.STRING, 0); }
		public StringLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseXorContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseXorContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseXor(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseOrContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseOrContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseOr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN() { return GetToken(YALGrammerParser.LESS_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OR_EQUAL() { return GetToken(YALGrammerParser.LESS_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN() { return GetToken(YALGrammerParser.GREATER_THAN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OR_EQUAL() { return GetToken(YALGrammerParser.GREATER_THAN_OR_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUALS() { return GetToken(YALGrammerParser.EQUALS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL() { return GetToken(YALGrammerParser.NOT_EQUAL, 0); }
		public ComparisonContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitComparison(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparison(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public AndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseAndContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public BitwiseAndContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseAnd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class PostIncrementDecrementContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT() { return GetToken(YALGrammerParser.INCREMENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT() { return GetToken(YALGrammerParser.DECREMENT, 0); }
		public PostIncrementDecrementContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterPostIncrementDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitPostIncrementDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPostIncrementDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationDivisionModuloContext : ExpressionContext {
		public IToken @operator;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMES() { return GetToken(YALGrammerParser.TIMES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV() { return GetToken(YALGrammerParser.DIV, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD() { return GetToken(YALGrammerParser.MOD, 0); }
		public MultiplicationDivisionModuloContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterMultiplicationDivisionModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitMultiplicationDivisionModulo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationDivisionModulo(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BitwiseNotContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT() { return GetToken(YALGrammerParser.BITWISE_NOT, 0); }
		public BitwiseNotContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitBitwiseNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwiseNot(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberLiteralContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITIVE_NUMBER() { return GetToken(YALGrammerParser.POSITIVE_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS() { return GetToken(YALGrammerParser.MINUS, 0); }
		public NumberLiteralContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitNumberLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 32;
		EnterRecursionRule(_localctx, 32, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
			case 1:
				{
				_localctx = new NotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 203;
				Match(T__7);
				State = 204;
				expression(22);
				}
				break;
			case 2:
				{
				_localctx = new PrefixUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 205;
				((PrefixUnaryContext)_localctx).@operator = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 4504424261091328L) != 0) ) {
					((PrefixUnaryContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 206;
				expression(20);
				}
				break;
			case 3:
				{
				_localctx = new VariableAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 207;
				simpleAssignment();
				}
				break;
			case 4:
				{
				_localctx = new VariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 208;
				identifier();
				}
				break;
			case 5:
				{
				_localctx = new FunctionCallExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 209;
				functionCall();
				}
				break;
			case 6:
				{
				_localctx = new FloatLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 210;
					Match(MINUS);
					}
				}

				State = 213;
				Match(FLOAT);
				}
				break;
			case 7:
				{
				_localctx = new NumberLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 215;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==MINUS) {
					{
					State = 214;
					Match(MINUS);
					}
				}

				State = 217;
				Match(POSITIVE_NUMBER);
				}
				break;
			case 8:
				{
				_localctx = new StringLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 218;
				Match(STRING);
				}
				break;
			case 9:
				{
				_localctx = new BooleanLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 219;
				Match(BOOLEAN);
				}
				break;
			case 10:
				{
				_localctx = new ParenthesizedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 220;
				Match(T__2);
				State = 221;
				expression(0);
				State = 222;
				Match(T__4);
				}
				break;
			case 11:
				{
				_localctx = new ArrayLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 224;
				Match(T__5);
				State = 233;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4504460703301960L) != 0) {
					{
					State = 225;
					expression(0);
					State = 230;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==T__3) {
						{
						{
						State = 226;
						Match(T__3);
						State = 227;
						expression(0);
						}
						}
						State = 232;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 235;
				Match(T__6);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 272;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 270;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationDivisionModuloContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 238;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 239;
						((MultiplicationDivisionModuloContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 15032385536L) != 0) ) {
							((MultiplicationDivisionModuloContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 240;
						expression(20);
						}
						break;
					case 2:
						{
						_localctx = new AdditionSubtractionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 241;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 242;
						((AdditionSubtractionContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditionSubtractionContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 243;
						expression(19);
						}
						break;
					case 3:
						{
						_localctx = new LeftRightShiftContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 244;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 245;
						((LeftRightShiftContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LSHIFT || _la==RSHIFT) ) {
							((LeftRightShiftContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 246;
						expression(18);
						}
						break;
					case 4:
						{
						_localctx = new BitwiseAndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 247;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 248;
						Match(T__8);
						State = 249;
						expression(17);
						}
						break;
					case 5:
						{
						_localctx = new BitwiseXorContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 250;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 251;
						Match(T__9);
						State = 252;
						expression(16);
						}
						break;
					case 6:
						{
						_localctx = new BitwiseOrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 253;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 254;
						Match(T__10);
						State = 255;
						expression(15);
						}
						break;
					case 7:
						{
						_localctx = new BitwiseNotContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 256;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 257;
						Match(BITWISE_NOT);
						State = 258;
						expression(14);
						}
						break;
					case 8:
						{
						_localctx = new ComparisonContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 259;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 260;
						((ComparisonContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 69269232549888L) != 0) ) {
							((ComparisonContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 261;
						expression(13);
						}
						break;
					case 9:
						{
						_localctx = new AndContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 262;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 263;
						Match(T__11);
						State = 264;
						expression(12);
						}
						break;
					case 10:
						{
						_localctx = new OrContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 265;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 266;
						Match(T__12);
						State = 267;
						expression(11);
						}
						break;
					case 11:
						{
						_localctx = new PostIncrementDecrementContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 268;
						if (!(Precpred(Context, 21))) throw new FailedPredicateException(this, "Precpred(Context, 21)");
						State = 269;
						((PostIncrementDecrementContext)_localctx).@operator = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INCREMENT || _la==DECREMENT) ) {
							((PostIncrementDecrementContext)_localctx).@operator = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 274;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ActualInputParamsContext actualInputParams() {
			return GetRuleContext<ActualInputParamsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AWAIT() { return GetToken(YALGrammerParser.AWAIT, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 34, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AWAIT) {
				{
				State = 275;
				Match(AWAIT);
				}
			}

			State = 278;
			Match(ID);
			State = 279;
			Match(T__2);
			State = 280;
			actualInputParams();
			State = 281;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActualInputParamsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ActualInputParamsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_actualInputParams; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterActualInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitActualInputParams(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitActualInputParams(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActualInputParamsContext actualInputParams() {
		ActualInputParamsContext _localctx = new ActualInputParamsContext(Context, State);
		EnterRule(_localctx, 36, RULE_actualInputParams);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 4504460703301960L) != 0) {
				{
				State = 283;
				expression(0);
				State = 288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 284;
					Match(T__3);
					State = 285;
					expression(0);
					}
					}
					State = 290;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext[] elseIfStatement() {
			return GetRuleContexts<ElseIfStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseIfStatementContext elseIfStatement(int i) {
			return GetRuleContext<ElseIfStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			Match(T__13);
			State = 294;
			Match(T__2);
			State = 295;
			expression(0);
			State = 296;
			Match(T__4);
			State = 297;
			statementBlock();
			State = 301;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__14) {
				{
				{
				State = 298;
				elseIfStatement();
				}
				}
				State = 303;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 305;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 304;
				elseStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseIfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseIfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseIfStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseIfStatementContext elseIfStatement() {
		ElseIfStatementContext _localctx = new ElseIfStatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_elseIfStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			Match(T__14);
			State = 308;
			Match(T__2);
			State = 309;
			expression(0);
			State = 310;
			Match(T__4);
			State = 311;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElseStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 42, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 313;
			Match(T__15);
			State = 314;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 44, RULE_whileStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			Match(T__16);
			State = 317;
			Match(T__2);
			State = 318;
			expression(0);
			State = 319;
			Match(T__4);
			State = 320;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationAssignmentContext declarationAssignment() {
			return GetRuleContext<DeclarationAssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementBlockContext statementBlock() {
			return GetRuleContext<StatementBlockContext>(0);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_forStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 322;
			Match(T__17);
			State = 323;
			Match(T__2);
			State = 324;
			declarationAssignment();
			State = 325;
			Match(T__0);
			State = 326;
			expression(0);
			State = 327;
			Match(T__0);
			State = 328;
			assignment();
			State = 329;
			Match(T__4);
			State = 330;
			statementBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
	 
		public IdentifierContext() { }
		public virtual void CopyFrom(IdentifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParenthesizedIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterParenthesizedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitParenthesizedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesizedIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArrayElementIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LBRACKET() { return GetToken(YALGrammerParser.LBRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RBRACKET() { return GetToken(YALGrammerParser.RBRACKET, 0); }
		public ArrayElementIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterArrayElementIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitArrayElementIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayElementIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SimpleIdentifierContext : IdentifierContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ID() { return GetToken(YALGrammerParser.ID, 0); }
		public SimpleIdentifierContext(IdentifierContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IYALGrammerListener typedListener = listener as IYALGrammerListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IYALGrammerVisitor<TResult> typedVisitor = visitor as IYALGrammerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSimpleIdentifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 48, RULE_identifier);
		try {
			State = 342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				_localctx = new ArrayElementIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 332;
				Match(ID);
				State = 333;
				Match(LBRACKET);
				State = 334;
				expression(0);
				State = 335;
				Match(RBRACKET);
				}
				break;
			case 2:
				_localctx = new SimpleIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 337;
				Match(ID);
				}
				break;
			case 3:
				_localctx = new ParenthesizedIdentifierContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 338;
				Match(T__2);
				State = 339;
				identifier();
				State = 340;
				Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 19);
		case 1: return Precpred(Context, 18);
		case 2: return Precpred(Context, 17);
		case 3: return Precpred(Context, 16);
		case 4: return Precpred(Context, 15);
		case 5: return Precpred(Context, 14);
		case 6: return Precpred(Context, 13);
		case 7: return Precpred(Context, 12);
		case 8: return Precpred(Context, 11);
		case 9: return Precpred(Context, 10);
		case 10: return Precpred(Context, 21);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,58,345,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,5,0,54,8,0,10,0,12,0,57,9,0,
		1,0,1,0,1,1,1,1,1,1,3,1,64,8,1,1,1,3,1,67,8,1,1,1,1,1,1,1,3,1,72,8,1,1,
		1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,83,8,2,1,2,3,2,86,8,2,1,2,1,2,1,
		3,3,3,91,8,3,1,3,1,3,1,3,3,3,96,8,3,1,3,3,3,99,8,3,1,3,1,3,1,4,1,4,1,4,
		1,4,1,4,5,4,108,8,4,10,4,12,4,111,9,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,5,5,
		120,8,5,10,5,12,5,123,9,5,1,5,1,5,1,6,1,6,1,6,1,6,4,6,131,8,6,11,6,12,
		6,132,5,6,135,8,6,10,6,12,6,138,9,6,1,6,1,6,1,7,1,7,1,7,3,7,145,8,7,1,
		8,1,8,1,8,1,8,3,8,151,8,8,1,9,1,9,3,9,155,8,9,1,10,1,10,1,10,3,10,160,
		8,10,1,10,1,10,1,10,1,10,3,10,166,8,10,1,11,1,11,1,11,3,11,171,8,11,1,
		12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,182,8,12,1,13,1,13,1,13,
		1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,196,8,15,10,15,12,15,
		199,9,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,212,
		8,16,1,16,1,16,3,16,216,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,5,16,229,8,16,10,16,12,16,232,9,16,3,16,234,8,16,1,16,3,16,
		237,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,16,1,16,1,16,1,16,5,16,271,8,16,10,16,12,16,274,9,16,1,17,3,
		17,277,8,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,5,18,287,8,18,10,18,
		12,18,290,9,18,3,18,292,8,18,1,19,1,19,1,19,1,19,1,19,1,19,5,19,300,8,
		19,10,19,12,19,303,9,19,1,19,3,19,306,8,19,1,20,1,20,1,20,1,20,1,20,1,
		20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,
		23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,
		24,1,24,3,24,343,8,24,1,24,0,1,32,25,0,2,4,6,8,10,12,14,16,18,20,22,24,
		26,28,30,32,34,36,38,40,42,44,46,48,0,7,1,0,46,51,1,0,38,39,2,0,38,39,
		52,52,1,0,31,33,1,0,34,35,1,0,36,37,1,0,40,45,380,0,55,1,0,0,0,2,60,1,
		0,0,0,4,75,1,0,0,0,6,90,1,0,0,0,8,102,1,0,0,0,10,114,1,0,0,0,12,126,1,
		0,0,0,14,144,1,0,0,0,16,150,1,0,0,0,18,154,1,0,0,0,20,165,1,0,0,0,22,170,
		1,0,0,0,24,181,1,0,0,0,26,183,1,0,0,0,28,187,1,0,0,0,30,191,1,0,0,0,32,
		236,1,0,0,0,34,276,1,0,0,0,36,291,1,0,0,0,38,293,1,0,0,0,40,307,1,0,0,
		0,42,313,1,0,0,0,44,316,1,0,0,0,46,322,1,0,0,0,48,342,1,0,0,0,50,54,3,
		4,2,0,51,54,3,2,1,0,52,54,3,6,3,0,53,50,1,0,0,0,53,51,1,0,0,0,53,52,1,
		0,0,0,54,57,1,0,0,0,55,53,1,0,0,0,55,56,1,0,0,0,56,58,1,0,0,0,57,55,1,
		0,0,0,58,59,5,0,0,1,59,1,1,0,0,0,60,66,5,23,0,0,61,63,5,53,0,0,62,64,5,
		29,0,0,63,62,1,0,0,0,63,64,1,0,0,0,64,65,1,0,0,0,65,67,5,54,0,0,66,61,
		1,0,0,0,66,67,1,0,0,0,67,68,1,0,0,0,68,71,5,28,0,0,69,70,5,46,0,0,70,72,
		3,32,16,0,71,69,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,74,5,1,0,0,74,3,
		1,0,0,0,75,76,5,19,0,0,76,77,5,40,0,0,77,78,5,26,0,0,78,79,5,42,0,0,79,
		80,5,28,0,0,80,82,5,2,0,0,81,83,3,8,4,0,82,81,1,0,0,0,82,83,1,0,0,0,83,
		85,1,0,0,0,84,86,3,10,5,0,85,84,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,87,
		88,5,1,0,0,88,5,1,0,0,0,89,91,5,20,0,0,90,89,1,0,0,0,90,91,1,0,0,0,91,
		92,1,0,0,0,92,93,5,28,0,0,93,95,5,2,0,0,94,96,3,8,4,0,95,94,1,0,0,0,95,
		96,1,0,0,0,96,98,1,0,0,0,97,99,3,10,5,0,98,97,1,0,0,0,98,99,1,0,0,0,99,
		100,1,0,0,0,100,101,3,12,6,0,101,7,1,0,0,0,102,103,5,24,0,0,103,104,5,
		3,0,0,104,109,3,20,10,0,105,106,5,4,0,0,106,108,3,20,10,0,107,105,1,0,
		0,0,108,111,1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,112,1,0,0,0,111,
		109,1,0,0,0,112,113,5,5,0,0,113,9,1,0,0,0,114,115,5,25,0,0,115,116,5,3,
		0,0,116,121,3,20,10,0,117,118,5,4,0,0,118,120,3,20,10,0,119,117,1,0,0,
		0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,
		121,1,0,0,0,124,125,5,5,0,0,125,11,1,0,0,0,126,136,5,6,0,0,127,135,3,14,
		7,0,128,130,3,16,8,0,129,131,5,1,0,0,130,129,1,0,0,0,131,132,1,0,0,0,132,
		130,1,0,0,0,132,133,1,0,0,0,133,135,1,0,0,0,134,127,1,0,0,0,134,128,1,
		0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,139,1,0,0,0,
		138,136,1,0,0,0,139,140,5,7,0,0,140,13,1,0,0,0,141,145,3,38,19,0,142,145,
		3,44,22,0,143,145,3,46,23,0,144,141,1,0,0,0,144,142,1,0,0,0,144,143,1,
		0,0,0,145,15,1,0,0,0,146,151,3,18,9,0,147,151,3,22,11,0,148,151,3,34,17,
		0,149,151,5,22,0,0,150,146,1,0,0,0,150,147,1,0,0,0,150,148,1,0,0,0,150,
		149,1,0,0,0,151,17,1,0,0,0,152,155,3,20,10,0,153,155,3,30,15,0,154,152,
		1,0,0,0,154,153,1,0,0,0,155,19,1,0,0,0,156,157,5,23,0,0,157,159,5,53,0,
		0,158,160,5,29,0,0,159,158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,
		162,5,54,0,0,162,166,5,28,0,0,163,164,5,23,0,0,164,166,5,28,0,0,165,156,
		1,0,0,0,165,163,1,0,0,0,166,21,1,0,0,0,167,171,3,24,12,0,168,171,3,26,
		13,0,169,171,3,28,14,0,170,167,1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,
		171,23,1,0,0,0,172,173,3,48,24,0,173,174,7,0,0,0,174,175,3,32,16,0,175,
		182,1,0,0,0,176,177,7,1,0,0,177,182,3,48,24,0,178,179,3,48,24,0,179,180,
		7,1,0,0,180,182,1,0,0,0,181,172,1,0,0,0,181,176,1,0,0,0,181,178,1,0,0,
		0,182,25,1,0,0,0,183,184,3,18,9,0,184,185,5,46,0,0,185,186,3,32,16,0,186,
		27,1,0,0,0,187,188,3,30,15,0,188,189,5,46,0,0,189,190,3,32,16,0,190,29,
		1,0,0,0,191,192,5,3,0,0,192,197,3,20,10,0,193,194,5,4,0,0,194,196,3,20,
		10,0,195,193,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,
		200,1,0,0,0,199,197,1,0,0,0,200,201,5,5,0,0,201,31,1,0,0,0,202,203,6,16,
		-1,0,203,204,5,8,0,0,204,237,3,32,16,22,205,206,7,2,0,0,206,237,3,32,16,
		20,207,237,3,24,12,0,208,237,3,48,24,0,209,237,3,34,17,0,210,212,5,35,
		0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,237,5,30,0,0,214,
		216,5,35,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,217,1,0,0,0,217,237,5,
		29,0,0,218,237,5,26,0,0,219,237,5,27,0,0,220,221,5,3,0,0,221,222,3,32,
		16,0,222,223,5,5,0,0,223,237,1,0,0,0,224,233,5,6,0,0,225,230,3,32,16,0,
		226,227,5,4,0,0,227,229,3,32,16,0,228,226,1,0,0,0,229,232,1,0,0,0,230,
		228,1,0,0,0,230,231,1,0,0,0,231,234,1,0,0,0,232,230,1,0,0,0,233,225,1,
		0,0,0,233,234,1,0,0,0,234,235,1,0,0,0,235,237,5,7,0,0,236,202,1,0,0,0,
		236,205,1,0,0,0,236,207,1,0,0,0,236,208,1,0,0,0,236,209,1,0,0,0,236,211,
		1,0,0,0,236,215,1,0,0,0,236,218,1,0,0,0,236,219,1,0,0,0,236,220,1,0,0,
		0,236,224,1,0,0,0,237,272,1,0,0,0,238,239,10,19,0,0,239,240,7,3,0,0,240,
		271,3,32,16,20,241,242,10,18,0,0,242,243,7,4,0,0,243,271,3,32,16,19,244,
		245,10,17,0,0,245,246,7,5,0,0,246,271,3,32,16,18,247,248,10,16,0,0,248,
		249,5,9,0,0,249,271,3,32,16,17,250,251,10,15,0,0,251,252,5,10,0,0,252,
		271,3,32,16,16,253,254,10,14,0,0,254,255,5,11,0,0,255,271,3,32,16,15,256,
		257,10,13,0,0,257,258,5,52,0,0,258,271,3,32,16,14,259,260,10,12,0,0,260,
		261,7,6,0,0,261,271,3,32,16,13,262,263,10,11,0,0,263,264,5,12,0,0,264,
		271,3,32,16,12,265,266,10,10,0,0,266,267,5,13,0,0,267,271,3,32,16,11,268,
		269,10,21,0,0,269,271,7,1,0,0,270,238,1,0,0,0,270,241,1,0,0,0,270,244,
		1,0,0,0,270,247,1,0,0,0,270,250,1,0,0,0,270,253,1,0,0,0,270,256,1,0,0,
		0,270,259,1,0,0,0,270,262,1,0,0,0,270,265,1,0,0,0,270,268,1,0,0,0,271,
		274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,33,1,0,0,0,274,272,1,0,
		0,0,275,277,5,21,0,0,276,275,1,0,0,0,276,277,1,0,0,0,277,278,1,0,0,0,278,
		279,5,28,0,0,279,280,5,3,0,0,280,281,3,36,18,0,281,282,5,5,0,0,282,35,
		1,0,0,0,283,288,3,32,16,0,284,285,5,4,0,0,285,287,3,32,16,0,286,284,1,
		0,0,0,287,290,1,0,0,0,288,286,1,0,0,0,288,289,1,0,0,0,289,292,1,0,0,0,
		290,288,1,0,0,0,291,283,1,0,0,0,291,292,1,0,0,0,292,37,1,0,0,0,293,294,
		5,14,0,0,294,295,5,3,0,0,295,296,3,32,16,0,296,297,5,5,0,0,297,301,3,12,
		6,0,298,300,3,40,20,0,299,298,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,
		301,302,1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,304,306,3,42,21,0,305,
		304,1,0,0,0,305,306,1,0,0,0,306,39,1,0,0,0,307,308,5,15,0,0,308,309,5,
		3,0,0,309,310,3,32,16,0,310,311,5,5,0,0,311,312,3,12,6,0,312,41,1,0,0,
		0,313,314,5,16,0,0,314,315,3,12,6,0,315,43,1,0,0,0,316,317,5,17,0,0,317,
		318,5,3,0,0,318,319,3,32,16,0,319,320,5,5,0,0,320,321,3,12,6,0,321,45,
		1,0,0,0,322,323,5,18,0,0,323,324,5,3,0,0,324,325,3,26,13,0,325,326,5,1,
		0,0,326,327,3,32,16,0,327,328,5,1,0,0,328,329,3,22,11,0,329,330,5,5,0,
		0,330,331,3,12,6,0,331,47,1,0,0,0,332,333,5,28,0,0,333,334,5,53,0,0,334,
		335,3,32,16,0,335,336,5,54,0,0,336,343,1,0,0,0,337,343,5,28,0,0,338,339,
		5,3,0,0,339,340,3,48,24,0,340,341,5,5,0,0,341,343,1,0,0,0,342,332,1,0,
		0,0,342,337,1,0,0,0,342,338,1,0,0,0,343,49,1,0,0,0,36,53,55,63,66,71,82,
		85,90,95,98,109,121,132,134,136,144,150,154,159,165,170,181,197,211,215,
		230,233,236,270,272,276,288,291,301,305,342
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
