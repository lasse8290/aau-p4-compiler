//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/Documents/GitHub/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		EXTERNAL=18, ASYNC=19, AWAIT=20, RETURN=21, TYPE=22, IN=23, OUT=24, REF=25, 
		STRING=26, BOOLEAN=27, ID=28, POSITIVE_INT=29, POSITIVE_UINT=30, FLOAT=31, 
		TIMES=32, DIV=33, MOD=34, PLUS=35, MINUS=36, LSHIFT=37, RSHIFT=38, INCREMENT=39, 
		DECREMENT=40, LESS_THAN=41, LESS_THAN_OR_EQUAL=42, GREATER_THAN=43, GREATER_THAN_OR_EQUAL=44, 
		EQUALS=45, NOT_EQUAL=46, EQUAL=47, PLUS_EQUAL=48, MINUS_EQUAL=49, MULTIPLY_EQUAL=50, 
		DIVIDE_EQUAL=51, MODULO_EQUAL=52, BITWISE_NOT=53, LBRACKET=54, RBRACKET=55, 
		WHITESPACE=56, NEWLINE=57, COMMENT=58, LINE_COMMENT=59;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"LOWERCASE", "UPPERCASE", "DIGIT", "LETTER", "DOUBLE_QUOTATION_MARK", 
		"SINGLE_QUOTATION_MARK", "UINT_SUFFIX", "FLOAT_SUFFIX", "EXTERNAL", "ASYNC", 
		"AWAIT", "RETURN", "TYPE", "IN", "OUT", "REF", "STRING", "BOOLEAN", "ID", 
		"POSITIVE_INT", "POSITIVE_UINT", "FLOAT", "TIMES", "DIV", "MOD", "PLUS", 
		"MINUS", "LSHIFT", "RSHIFT", "INCREMENT", "DECREMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN", "GREATER_THAN_OR_EQUAL", "EQUALS", "NOT_EQUAL", "EQUAL", 
		"PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", "DIVIDE_EQUAL", "MODULO_EQUAL", 
		"BITWISE_NOT", "LBRACKET", "RBRACKET", "WHITESPACE", "NEWLINE", "COMMENT", 
		"LINE_COMMENT"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "')'", "'{'", "'}'", "','", "'!'", "'&'", "'^'", 
		"'|'", "'&&'", "'||'", "'if'", "'else if'", "'else'", "'while'", "'external'", 
		"'async'", "'await'", "'return'", null, "'in'", "'out'", "'ref'", null, 
		null, null, null, null, null, "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", 
		"'>>'", "'++'", "'--'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'~'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "EXTERNAL", "ASYNC", "AWAIT", "RETURN", 
		"TYPE", "IN", "OUT", "REF", "STRING", "BOOLEAN", "ID", "POSITIVE_INT", 
		"POSITIVE_UINT", "FLOAT", "TIMES", "DIV", "MOD", "PLUS", "MINUS", "LSHIFT", 
		"RSHIFT", "INCREMENT", "DECREMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", 
		"GREATER_THAN", "GREATER_THAN_OR_EQUAL", "EQUALS", "NOT_EQUAL", "EQUAL", 
		"PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", "DIVIDE_EQUAL", "MODULO_EQUAL", 
		"BITWISE_NOT", "LBRACKET", "RBRACKET", "WHITESPACE", "NEWLINE", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,59,499,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,2,64,7,64,2,65,7,65,2,66,7,66,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,
		12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,
		18,1,19,1,19,1,20,1,20,3,20,194,8,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,
		1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
		1,29,3,29,302,8,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
		32,1,33,1,33,1,33,1,33,5,33,319,8,33,10,33,12,33,322,9,33,1,33,1,33,1,
		33,1,33,1,33,1,33,5,33,330,8,33,10,33,12,33,333,9,33,1,33,1,33,3,33,337,
		8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,348,8,34,1,35,1,
		35,3,35,352,8,35,1,35,1,35,1,35,5,35,357,8,35,10,35,12,35,360,9,35,1,36,
		1,36,5,36,364,8,36,10,36,12,36,367,9,36,1,37,1,37,5,37,371,8,37,10,37,
		12,37,374,9,37,1,37,1,37,1,38,1,38,5,38,380,8,38,10,38,12,38,383,9,38,
		1,38,1,38,1,38,5,38,388,8,38,10,38,12,38,391,9,38,1,38,3,38,394,8,38,1,
		39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,44,1,45,1,
		45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,49,1,49,1,49,1,50,1,
		50,1,51,1,51,1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,
		55,1,56,1,56,1,56,1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,
		60,1,61,1,61,1,62,1,62,1,63,4,63,458,8,63,11,63,12,63,459,1,63,1,63,1,
		64,3,64,465,8,64,1,64,1,64,4,64,469,8,64,11,64,12,64,470,1,64,1,64,1,65,
		1,65,1,65,1,65,5,65,479,8,65,10,65,12,65,482,9,65,1,65,1,65,1,65,1,65,
		1,65,1,66,1,66,1,66,1,66,5,66,493,8,66,10,66,12,66,496,9,66,1,66,1,66,
		3,320,331,480,0,67,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,0,37,0,39,0,41,0,43,0,45,0,47,0,
		49,0,51,18,53,19,55,20,57,21,59,22,61,23,63,24,65,25,67,26,69,27,71,28,
		73,29,75,30,77,31,79,32,81,33,83,34,85,35,87,36,89,37,91,38,93,39,95,40,
		97,41,99,42,101,43,103,44,105,45,107,46,109,47,111,48,113,49,115,50,117,
		51,119,52,121,53,123,54,125,55,127,56,129,57,131,58,133,59,1,0,7,1,0,97,
		122,1,0,65,90,1,0,48,57,2,0,85,85,117,117,2,0,70,70,102,102,2,0,9,9,32,
		32,2,0,10,10,13,13,524,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
		0,31,1,0,0,0,0,33,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
		1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,
		0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,
		1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,
		1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,
		1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,
		1,0,0,0,0,133,1,0,0,0,1,135,1,0,0,0,3,137,1,0,0,0,5,139,1,0,0,0,7,141,
		1,0,0,0,9,143,1,0,0,0,11,145,1,0,0,0,13,147,1,0,0,0,15,149,1,0,0,0,17,
		151,1,0,0,0,19,153,1,0,0,0,21,155,1,0,0,0,23,157,1,0,0,0,25,160,1,0,0,
		0,27,163,1,0,0,0,29,166,1,0,0,0,31,174,1,0,0,0,33,179,1,0,0,0,35,185,1,
		0,0,0,37,187,1,0,0,0,39,189,1,0,0,0,41,193,1,0,0,0,43,195,1,0,0,0,45,197,
		1,0,0,0,47,199,1,0,0,0,49,201,1,0,0,0,51,203,1,0,0,0,53,212,1,0,0,0,55,
		218,1,0,0,0,57,224,1,0,0,0,59,301,1,0,0,0,61,303,1,0,0,0,63,306,1,0,0,
		0,65,310,1,0,0,0,67,336,1,0,0,0,69,347,1,0,0,0,71,351,1,0,0,0,73,361,1,
		0,0,0,75,368,1,0,0,0,77,377,1,0,0,0,79,395,1,0,0,0,81,397,1,0,0,0,83,399,
		1,0,0,0,85,401,1,0,0,0,87,403,1,0,0,0,89,405,1,0,0,0,91,408,1,0,0,0,93,
		411,1,0,0,0,95,414,1,0,0,0,97,417,1,0,0,0,99,419,1,0,0,0,101,422,1,0,0,
		0,103,424,1,0,0,0,105,427,1,0,0,0,107,430,1,0,0,0,109,433,1,0,0,0,111,
		435,1,0,0,0,113,438,1,0,0,0,115,441,1,0,0,0,117,444,1,0,0,0,119,447,1,
		0,0,0,121,450,1,0,0,0,123,452,1,0,0,0,125,454,1,0,0,0,127,457,1,0,0,0,
		129,468,1,0,0,0,131,474,1,0,0,0,133,488,1,0,0,0,135,136,5,59,0,0,136,2,
		1,0,0,0,137,138,5,58,0,0,138,4,1,0,0,0,139,140,5,40,0,0,140,6,1,0,0,0,
		141,142,5,41,0,0,142,8,1,0,0,0,143,144,5,123,0,0,144,10,1,0,0,0,145,146,
		5,125,0,0,146,12,1,0,0,0,147,148,5,44,0,0,148,14,1,0,0,0,149,150,5,33,
		0,0,150,16,1,0,0,0,151,152,5,38,0,0,152,18,1,0,0,0,153,154,5,94,0,0,154,
		20,1,0,0,0,155,156,5,124,0,0,156,22,1,0,0,0,157,158,5,38,0,0,158,159,5,
		38,0,0,159,24,1,0,0,0,160,161,5,124,0,0,161,162,5,124,0,0,162,26,1,0,0,
		0,163,164,5,105,0,0,164,165,5,102,0,0,165,28,1,0,0,0,166,167,5,101,0,0,
		167,168,5,108,0,0,168,169,5,115,0,0,169,170,5,101,0,0,170,171,5,32,0,0,
		171,172,5,105,0,0,172,173,5,102,0,0,173,30,1,0,0,0,174,175,5,101,0,0,175,
		176,5,108,0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,32,1,0,0,0,179,180,
		5,119,0,0,180,181,5,104,0,0,181,182,5,105,0,0,182,183,5,108,0,0,183,184,
		5,101,0,0,184,34,1,0,0,0,185,186,7,0,0,0,186,36,1,0,0,0,187,188,7,1,0,
		0,188,38,1,0,0,0,189,190,7,2,0,0,190,40,1,0,0,0,191,194,3,35,17,0,192,
		194,3,37,18,0,193,191,1,0,0,0,193,192,1,0,0,0,194,42,1,0,0,0,195,196,5,
		34,0,0,196,44,1,0,0,0,197,198,5,39,0,0,198,46,1,0,0,0,199,200,7,3,0,0,
		200,48,1,0,0,0,201,202,7,4,0,0,202,50,1,0,0,0,203,204,5,101,0,0,204,205,
		5,120,0,0,205,206,5,116,0,0,206,207,5,101,0,0,207,208,5,114,0,0,208,209,
		5,110,0,0,209,210,5,97,0,0,210,211,5,108,0,0,211,52,1,0,0,0,212,213,5,
		97,0,0,213,214,5,115,0,0,214,215,5,121,0,0,215,216,5,110,0,0,216,217,5,
		99,0,0,217,54,1,0,0,0,218,219,5,97,0,0,219,220,5,119,0,0,220,221,5,97,
		0,0,221,222,5,105,0,0,222,223,5,116,0,0,223,56,1,0,0,0,224,225,5,114,0,
		0,225,226,5,101,0,0,226,227,5,116,0,0,227,228,5,117,0,0,228,229,5,114,
		0,0,229,230,5,110,0,0,230,58,1,0,0,0,231,232,5,105,0,0,232,233,5,110,0,
		0,233,234,5,116,0,0,234,302,5,56,0,0,235,236,5,105,0,0,236,237,5,110,0,
		0,237,238,5,116,0,0,238,239,5,49,0,0,239,302,5,54,0,0,240,241,5,105,0,
		0,241,242,5,110,0,0,242,243,5,116,0,0,243,244,5,51,0,0,244,302,5,50,0,
		0,245,246,5,105,0,0,246,247,5,110,0,0,247,248,5,116,0,0,248,249,5,54,0,
		0,249,302,5,52,0,0,250,251,5,117,0,0,251,252,5,105,0,0,252,253,5,110,0,
		0,253,254,5,116,0,0,254,302,5,56,0,0,255,256,5,117,0,0,256,257,5,105,0,
		0,257,258,5,110,0,0,258,259,5,116,0,0,259,260,5,49,0,0,260,302,5,54,0,
		0,261,262,5,117,0,0,262,263,5,105,0,0,263,264,5,110,0,0,264,265,5,116,
		0,0,265,266,5,51,0,0,266,302,5,50,0,0,267,268,5,117,0,0,268,269,5,105,
		0,0,269,270,5,110,0,0,270,271,5,116,0,0,271,272,5,54,0,0,272,302,5,52,
		0,0,273,274,5,102,0,0,274,275,5,108,0,0,275,276,5,111,0,0,276,277,5,97,
		0,0,277,278,5,116,0,0,278,279,5,51,0,0,279,302,5,50,0,0,280,281,5,102,
		0,0,281,282,5,108,0,0,282,283,5,111,0,0,283,284,5,97,0,0,284,285,5,116,
		0,0,285,286,5,54,0,0,286,302,5,52,0,0,287,288,5,99,0,0,288,289,5,104,0,
		0,289,290,5,97,0,0,290,302,5,114,0,0,291,292,5,115,0,0,292,293,5,116,0,
		0,293,294,5,114,0,0,294,295,5,105,0,0,295,296,5,110,0,0,296,302,5,103,
		0,0,297,298,5,98,0,0,298,299,5,111,0,0,299,300,5,111,0,0,300,302,5,108,
		0,0,301,231,1,0,0,0,301,235,1,0,0,0,301,240,1,0,0,0,301,245,1,0,0,0,301,
		250,1,0,0,0,301,255,1,0,0,0,301,261,1,0,0,0,301,267,1,0,0,0,301,273,1,
		0,0,0,301,280,1,0,0,0,301,287,1,0,0,0,301,291,1,0,0,0,301,297,1,0,0,0,
		302,60,1,0,0,0,303,304,5,105,0,0,304,305,5,110,0,0,305,62,1,0,0,0,306,
		307,5,111,0,0,307,308,5,117,0,0,308,309,5,116,0,0,309,64,1,0,0,0,310,311,
		5,114,0,0,311,312,5,101,0,0,312,313,5,102,0,0,313,66,1,0,0,0,314,320,3,
		45,22,0,315,316,5,92,0,0,316,319,3,45,22,0,317,319,9,0,0,0,318,315,1,0,
		0,0,318,317,1,0,0,0,319,322,1,0,0,0,320,321,1,0,0,0,320,318,1,0,0,0,321,
		323,1,0,0,0,322,320,1,0,0,0,323,324,3,45,22,0,324,337,1,0,0,0,325,331,
		3,43,21,0,326,327,5,92,0,0,327,330,3,43,21,0,328,330,9,0,0,0,329,326,1,
		0,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,332,1,0,0,0,331,329,1,0,0,0,
		332,334,1,0,0,0,333,331,1,0,0,0,334,335,3,43,21,0,335,337,1,0,0,0,336,
		314,1,0,0,0,336,325,1,0,0,0,337,68,1,0,0,0,338,339,5,116,0,0,339,340,5,
		114,0,0,340,341,5,117,0,0,341,348,5,101,0,0,342,343,5,102,0,0,343,344,
		5,97,0,0,344,345,5,108,0,0,345,346,5,115,0,0,346,348,5,101,0,0,347,338,
		1,0,0,0,347,342,1,0,0,0,348,70,1,0,0,0,349,352,3,41,20,0,350,352,5,95,
		0,0,351,349,1,0,0,0,351,350,1,0,0,0,352,358,1,0,0,0,353,357,3,41,20,0,
		354,357,3,39,19,0,355,357,5,95,0,0,356,353,1,0,0,0,356,354,1,0,0,0,356,
		355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,72,1,0,
		0,0,360,358,1,0,0,0,361,365,3,39,19,0,362,364,3,39,19,0,363,362,1,0,0,
		0,364,367,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,74,1,0,0,0,367,365,
		1,0,0,0,368,372,3,39,19,0,369,371,3,39,19,0,370,369,1,0,0,0,371,374,1,
		0,0,0,372,370,1,0,0,0,372,373,1,0,0,0,373,375,1,0,0,0,374,372,1,0,0,0,
		375,376,3,47,23,0,376,76,1,0,0,0,377,381,3,39,19,0,378,380,3,39,19,0,379,
		378,1,0,0,0,380,383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,
		0,0,0,383,381,1,0,0,0,384,385,5,46,0,0,385,389,3,39,19,0,386,388,3,39,
		19,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,1,0,0,0,389,390,1,0,0,0,390,
		393,1,0,0,0,391,389,1,0,0,0,392,394,3,49,24,0,393,392,1,0,0,0,393,394,
		1,0,0,0,394,78,1,0,0,0,395,396,5,42,0,0,396,80,1,0,0,0,397,398,5,47,0,
		0,398,82,1,0,0,0,399,400,5,37,0,0,400,84,1,0,0,0,401,402,5,43,0,0,402,
		86,1,0,0,0,403,404,5,45,0,0,404,88,1,0,0,0,405,406,5,60,0,0,406,407,5,
		60,0,0,407,90,1,0,0,0,408,409,5,62,0,0,409,410,5,62,0,0,410,92,1,0,0,0,
		411,412,5,43,0,0,412,413,5,43,0,0,413,94,1,0,0,0,414,415,5,45,0,0,415,
		416,5,45,0,0,416,96,1,0,0,0,417,418,5,60,0,0,418,98,1,0,0,0,419,420,5,
		60,0,0,420,421,5,61,0,0,421,100,1,0,0,0,422,423,5,62,0,0,423,102,1,0,0,
		0,424,425,5,62,0,0,425,426,5,61,0,0,426,104,1,0,0,0,427,428,5,61,0,0,428,
		429,5,61,0,0,429,106,1,0,0,0,430,431,5,33,0,0,431,432,5,61,0,0,432,108,
		1,0,0,0,433,434,5,61,0,0,434,110,1,0,0,0,435,436,5,43,0,0,436,437,5,61,
		0,0,437,112,1,0,0,0,438,439,5,45,0,0,439,440,5,61,0,0,440,114,1,0,0,0,
		441,442,5,42,0,0,442,443,5,61,0,0,443,116,1,0,0,0,444,445,5,47,0,0,445,
		446,5,61,0,0,446,118,1,0,0,0,447,448,5,37,0,0,448,449,5,61,0,0,449,120,
		1,0,0,0,450,451,5,126,0,0,451,122,1,0,0,0,452,453,5,91,0,0,453,124,1,0,
		0,0,454,455,5,93,0,0,455,126,1,0,0,0,456,458,7,5,0,0,457,456,1,0,0,0,458,
		459,1,0,0,0,459,457,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,462,6,
		63,0,0,462,128,1,0,0,0,463,465,5,13,0,0,464,463,1,0,0,0,464,465,1,0,0,
		0,465,466,1,0,0,0,466,469,5,10,0,0,467,469,5,13,0,0,468,464,1,0,0,0,468,
		467,1,0,0,0,469,470,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,472,1,
		0,0,0,472,473,6,64,0,0,473,130,1,0,0,0,474,475,5,47,0,0,475,476,5,42,0,
		0,476,480,1,0,0,0,477,479,9,0,0,0,478,477,1,0,0,0,479,482,1,0,0,0,480,
		481,1,0,0,0,480,478,1,0,0,0,481,483,1,0,0,0,482,480,1,0,0,0,483,484,5,
		42,0,0,484,485,5,47,0,0,485,486,1,0,0,0,486,487,6,65,0,0,487,132,1,0,0,
		0,488,489,5,47,0,0,489,490,5,47,0,0,490,494,1,0,0,0,491,493,8,6,0,0,492,
		491,1,0,0,0,493,496,1,0,0,0,494,492,1,0,0,0,494,495,1,0,0,0,495,497,1,
		0,0,0,496,494,1,0,0,0,497,498,6,66,0,0,498,134,1,0,0,0,23,0,193,301,318,
		320,329,331,336,347,351,356,358,365,372,381,389,393,459,464,468,470,480,
		494,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
