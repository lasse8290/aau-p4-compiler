//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/Documents/GitHub/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, EXTERNAL=19, ASYNC=20, AWAIT=21, RETURN=22, TYPE=23, IN=24, 
		OUT=25, STRING=26, BOOLEAN=27, ID=28, POSITIVE_NUMBER=29, FLOAT=30, TIMES=31, 
		DIV=32, MOD=33, PLUS=34, MINUS=35, LSHIFT=36, RSHIFT=37, INCREMENT=38, 
		DECREMENT=39, LESS_THAN=40, LESS_THAN_OR_EQUAL=41, GREATER_THAN=42, GREATER_THAN_OR_EQUAL=43, 
		EQUALS=44, NOT_EQUAL=45, EQUAL=46, PLUS_EQUAL=47, MINUS_EQUAL=48, MULTIPLY_EQUAL=49, 
		DIVIDE_EQUAL=50, MODULO_EQUAL=51, BITWISE_NOT=52, LBRACKET=53, RBRACKET=54, 
		WHITESPACE=55, NEWLINE=56, COMMENT=57, LINE_COMMENT=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "LOWERCASE", "UPPERCASE", "DIGIT", "LETTER", "DOUBLE_QUOTATION_MARK", 
		"SINGLE_QUOTATION_MARK", "EXTERNAL", "ASYNC", "AWAIT", "RETURN", "TYPE", 
		"IN", "OUT", "STRING", "BOOLEAN", "ID", "POSITIVE_NUMBER", "FLOAT", "TIMES", 
		"DIV", "MOD", "PLUS", "MINUS", "LSHIFT", "RSHIFT", "INCREMENT", "DECREMENT", 
		"LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
		"EQUALS", "NOT_EQUAL", "EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
		"DIVIDE_EQUAL", "MODULO_EQUAL", "BITWISE_NOT", "LBRACKET", "RBRACKET", 
		"WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "','", "')'", "'{'", "'}'", "'&'", "'^'", "'|'", 
		"'!'", "'&&'", "'||'", "'if'", "'else if'", "'else'", "'while'", "'for'", 
		"'external'", "'async'", "'await'", "'return'", null, "'in'", "'out'", 
		null, null, null, null, null, "'*'", "'/'", "'%'", "'+'", "'-'", "'<<'", 
		"'>>'", "'++'", "'--'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", 
		"'='", "'+='", "'-='", "'*='", "'\\='", "'%='", "'~'", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "EXTERNAL", "ASYNC", "AWAIT", 
		"RETURN", "TYPE", "IN", "OUT", "STRING", "BOOLEAN", "ID", "POSITIVE_NUMBER", 
		"FLOAT", "TIMES", "DIV", "MOD", "PLUS", "MINUS", "LSHIFT", "RSHIFT", "INCREMENT", 
		"DECREMENT", "LESS_THAN", "LESS_THAN_OR_EQUAL", "GREATER_THAN", "GREATER_THAN_OR_EQUAL", 
		"EQUALS", "NOT_EQUAL", "EQUAL", "PLUS_EQUAL", "MINUS_EQUAL", "MULTIPLY_EQUAL", 
		"DIVIDE_EQUAL", "MODULO_EQUAL", "BITWISE_NOT", "LBRACKET", "RBRACKET", 
		"WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,477,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,
		16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,
		20,1,21,1,21,3,21,192,8,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,24,
		1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,
		1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
		1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,296,8,28,1,29,1,29,1,
		29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,5,31,309,8,31,10,31,12,31,312,
		9,31,1,31,1,31,1,31,1,31,1,31,1,31,5,31,320,8,31,10,31,12,31,323,9,31,
		1,31,1,31,3,31,327,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,
		32,338,8,32,1,33,1,33,3,33,342,8,33,1,33,1,33,1,33,5,33,347,8,33,10,33,
		12,33,350,9,33,1,34,1,34,5,34,354,8,34,10,34,12,34,357,9,34,1,35,1,35,
		5,35,361,8,35,10,35,12,35,364,9,35,1,35,1,35,1,35,5,35,369,8,35,10,35,
		12,35,372,9,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,
		1,41,1,41,1,42,1,42,1,42,1,43,1,43,1,43,1,44,1,44,1,44,1,45,1,45,1,46,
		1,46,1,46,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,
		1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,
		1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,4,60,436,8,60,11,60,12,60,
		437,1,60,1,60,1,61,3,61,443,8,61,1,61,1,61,4,61,447,8,61,11,61,12,61,448,
		1,61,1,61,1,62,1,62,1,62,1,62,5,62,457,8,62,10,62,12,62,460,9,62,1,62,
		1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,5,63,471,8,63,10,63,12,63,474,
		9,63,1,63,1,63,3,310,321,458,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,0,39,0,41,0,
		43,0,45,0,47,0,49,19,51,20,53,21,55,22,57,23,59,24,61,25,63,26,65,27,67,
		28,69,29,71,30,73,31,75,32,77,33,79,34,81,35,83,36,85,37,87,38,89,39,91,
		40,93,41,95,42,97,43,99,44,101,45,103,46,105,47,107,48,109,49,111,50,113,
		51,115,52,117,53,119,54,121,55,123,56,125,57,127,58,1,0,5,1,0,97,122,1,
		0,65,90,1,0,48,57,2,0,9,9,32,32,2,0,10,10,13,13,502,0,1,1,0,0,0,0,3,1,
		0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
		15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
		0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
		0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
		1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
		0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,
		1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,
		0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,
		103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,
		113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,
		123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,131,1,0,0,0,5,
		133,1,0,0,0,7,135,1,0,0,0,9,137,1,0,0,0,11,139,1,0,0,0,13,141,1,0,0,0,
		15,143,1,0,0,0,17,145,1,0,0,0,19,147,1,0,0,0,21,149,1,0,0,0,23,151,1,0,
		0,0,25,154,1,0,0,0,27,157,1,0,0,0,29,160,1,0,0,0,31,168,1,0,0,0,33,173,
		1,0,0,0,35,179,1,0,0,0,37,183,1,0,0,0,39,185,1,0,0,0,41,187,1,0,0,0,43,
		191,1,0,0,0,45,193,1,0,0,0,47,195,1,0,0,0,49,197,1,0,0,0,51,206,1,0,0,
		0,53,212,1,0,0,0,55,218,1,0,0,0,57,295,1,0,0,0,59,297,1,0,0,0,61,300,1,
		0,0,0,63,326,1,0,0,0,65,337,1,0,0,0,67,341,1,0,0,0,69,351,1,0,0,0,71,358,
		1,0,0,0,73,373,1,0,0,0,75,375,1,0,0,0,77,377,1,0,0,0,79,379,1,0,0,0,81,
		381,1,0,0,0,83,383,1,0,0,0,85,386,1,0,0,0,87,389,1,0,0,0,89,392,1,0,0,
		0,91,395,1,0,0,0,93,397,1,0,0,0,95,400,1,0,0,0,97,402,1,0,0,0,99,405,1,
		0,0,0,101,408,1,0,0,0,103,411,1,0,0,0,105,413,1,0,0,0,107,416,1,0,0,0,
		109,419,1,0,0,0,111,422,1,0,0,0,113,425,1,0,0,0,115,428,1,0,0,0,117,430,
		1,0,0,0,119,432,1,0,0,0,121,435,1,0,0,0,123,446,1,0,0,0,125,452,1,0,0,
		0,127,466,1,0,0,0,129,130,5,59,0,0,130,2,1,0,0,0,131,132,5,58,0,0,132,
		4,1,0,0,0,133,134,5,40,0,0,134,6,1,0,0,0,135,136,5,44,0,0,136,8,1,0,0,
		0,137,138,5,41,0,0,138,10,1,0,0,0,139,140,5,123,0,0,140,12,1,0,0,0,141,
		142,5,125,0,0,142,14,1,0,0,0,143,144,5,38,0,0,144,16,1,0,0,0,145,146,5,
		94,0,0,146,18,1,0,0,0,147,148,5,124,0,0,148,20,1,0,0,0,149,150,5,33,0,
		0,150,22,1,0,0,0,151,152,5,38,0,0,152,153,5,38,0,0,153,24,1,0,0,0,154,
		155,5,124,0,0,155,156,5,124,0,0,156,26,1,0,0,0,157,158,5,105,0,0,158,159,
		5,102,0,0,159,28,1,0,0,0,160,161,5,101,0,0,161,162,5,108,0,0,162,163,5,
		115,0,0,163,164,5,101,0,0,164,165,5,32,0,0,165,166,5,105,0,0,166,167,5,
		102,0,0,167,30,1,0,0,0,168,169,5,101,0,0,169,170,5,108,0,0,170,171,5,115,
		0,0,171,172,5,101,0,0,172,32,1,0,0,0,173,174,5,119,0,0,174,175,5,104,0,
		0,175,176,5,105,0,0,176,177,5,108,0,0,177,178,5,101,0,0,178,34,1,0,0,0,
		179,180,5,102,0,0,180,181,5,111,0,0,181,182,5,114,0,0,182,36,1,0,0,0,183,
		184,7,0,0,0,184,38,1,0,0,0,185,186,7,1,0,0,186,40,1,0,0,0,187,188,7,2,
		0,0,188,42,1,0,0,0,189,192,3,37,18,0,190,192,3,39,19,0,191,189,1,0,0,0,
		191,190,1,0,0,0,192,44,1,0,0,0,193,194,5,34,0,0,194,46,1,0,0,0,195,196,
		5,39,0,0,196,48,1,0,0,0,197,198,5,101,0,0,198,199,5,120,0,0,199,200,5,
		116,0,0,200,201,5,101,0,0,201,202,5,114,0,0,202,203,5,110,0,0,203,204,
		5,97,0,0,204,205,5,108,0,0,205,50,1,0,0,0,206,207,5,97,0,0,207,208,5,115,
		0,0,208,209,5,121,0,0,209,210,5,110,0,0,210,211,5,99,0,0,211,52,1,0,0,
		0,212,213,5,97,0,0,213,214,5,119,0,0,214,215,5,97,0,0,215,216,5,105,0,
		0,216,217,5,116,0,0,217,54,1,0,0,0,218,219,5,114,0,0,219,220,5,101,0,0,
		220,221,5,116,0,0,221,222,5,117,0,0,222,223,5,114,0,0,223,224,5,110,0,
		0,224,56,1,0,0,0,225,226,5,105,0,0,226,227,5,110,0,0,227,228,5,116,0,0,
		228,296,5,56,0,0,229,230,5,105,0,0,230,231,5,110,0,0,231,232,5,116,0,0,
		232,233,5,49,0,0,233,296,5,54,0,0,234,235,5,105,0,0,235,236,5,110,0,0,
		236,237,5,116,0,0,237,238,5,51,0,0,238,296,5,50,0,0,239,240,5,105,0,0,
		240,241,5,110,0,0,241,242,5,116,0,0,242,243,5,54,0,0,243,296,5,52,0,0,
		244,245,5,117,0,0,245,246,5,105,0,0,246,247,5,110,0,0,247,248,5,116,0,
		0,248,296,5,56,0,0,249,250,5,117,0,0,250,251,5,105,0,0,251,252,5,110,0,
		0,252,253,5,116,0,0,253,254,5,49,0,0,254,296,5,54,0,0,255,256,5,117,0,
		0,256,257,5,105,0,0,257,258,5,110,0,0,258,259,5,116,0,0,259,260,5,51,0,
		0,260,296,5,50,0,0,261,262,5,117,0,0,262,263,5,105,0,0,263,264,5,110,0,
		0,264,265,5,116,0,0,265,266,5,54,0,0,266,296,5,52,0,0,267,268,5,102,0,
		0,268,269,5,108,0,0,269,270,5,111,0,0,270,271,5,97,0,0,271,272,5,116,0,
		0,272,273,5,51,0,0,273,296,5,50,0,0,274,275,5,102,0,0,275,276,5,108,0,
		0,276,277,5,111,0,0,277,278,5,97,0,0,278,279,5,116,0,0,279,280,5,54,0,
		0,280,296,5,52,0,0,281,282,5,99,0,0,282,283,5,104,0,0,283,284,5,97,0,0,
		284,296,5,114,0,0,285,286,5,115,0,0,286,287,5,116,0,0,287,288,5,114,0,
		0,288,289,5,105,0,0,289,290,5,110,0,0,290,296,5,103,0,0,291,292,5,98,0,
		0,292,293,5,111,0,0,293,294,5,111,0,0,294,296,5,108,0,0,295,225,1,0,0,
		0,295,229,1,0,0,0,295,234,1,0,0,0,295,239,1,0,0,0,295,244,1,0,0,0,295,
		249,1,0,0,0,295,255,1,0,0,0,295,261,1,0,0,0,295,267,1,0,0,0,295,274,1,
		0,0,0,295,281,1,0,0,0,295,285,1,0,0,0,295,291,1,0,0,0,296,58,1,0,0,0,297,
		298,5,105,0,0,298,299,5,110,0,0,299,60,1,0,0,0,300,301,5,111,0,0,301,302,
		5,117,0,0,302,303,5,116,0,0,303,62,1,0,0,0,304,310,3,47,23,0,305,306,5,
		92,0,0,306,309,3,47,23,0,307,309,9,0,0,0,308,305,1,0,0,0,308,307,1,0,0,
		0,309,312,1,0,0,0,310,311,1,0,0,0,310,308,1,0,0,0,311,313,1,0,0,0,312,
		310,1,0,0,0,313,314,3,47,23,0,314,327,1,0,0,0,315,321,3,45,22,0,316,317,
		5,92,0,0,317,320,3,45,22,0,318,320,9,0,0,0,319,316,1,0,0,0,319,318,1,0,
		0,0,320,323,1,0,0,0,321,322,1,0,0,0,321,319,1,0,0,0,322,324,1,0,0,0,323,
		321,1,0,0,0,324,325,3,45,22,0,325,327,1,0,0,0,326,304,1,0,0,0,326,315,
		1,0,0,0,327,64,1,0,0,0,328,329,5,116,0,0,329,330,5,114,0,0,330,331,5,117,
		0,0,331,338,5,101,0,0,332,333,5,102,0,0,333,334,5,97,0,0,334,335,5,108,
		0,0,335,336,5,115,0,0,336,338,5,101,0,0,337,328,1,0,0,0,337,332,1,0,0,
		0,338,66,1,0,0,0,339,342,3,43,21,0,340,342,5,95,0,0,341,339,1,0,0,0,341,
		340,1,0,0,0,342,348,1,0,0,0,343,347,3,43,21,0,344,347,3,41,20,0,345,347,
		5,95,0,0,346,343,1,0,0,0,346,344,1,0,0,0,346,345,1,0,0,0,347,350,1,0,0,
		0,348,346,1,0,0,0,348,349,1,0,0,0,349,68,1,0,0,0,350,348,1,0,0,0,351,355,
		3,41,20,0,352,354,3,41,20,0,353,352,1,0,0,0,354,357,1,0,0,0,355,353,1,
		0,0,0,355,356,1,0,0,0,356,70,1,0,0,0,357,355,1,0,0,0,358,362,3,41,20,0,
		359,361,3,41,20,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,0,0,0,362,
		363,1,0,0,0,363,365,1,0,0,0,364,362,1,0,0,0,365,366,5,46,0,0,366,370,3,
		41,20,0,367,369,3,41,20,0,368,367,1,0,0,0,369,372,1,0,0,0,370,368,1,0,
		0,0,370,371,1,0,0,0,371,72,1,0,0,0,372,370,1,0,0,0,373,374,5,42,0,0,374,
		74,1,0,0,0,375,376,5,47,0,0,376,76,1,0,0,0,377,378,5,37,0,0,378,78,1,0,
		0,0,379,380,5,43,0,0,380,80,1,0,0,0,381,382,5,45,0,0,382,82,1,0,0,0,383,
		384,5,60,0,0,384,385,5,60,0,0,385,84,1,0,0,0,386,387,5,62,0,0,387,388,
		5,62,0,0,388,86,1,0,0,0,389,390,5,43,0,0,390,391,5,43,0,0,391,88,1,0,0,
		0,392,393,5,45,0,0,393,394,5,45,0,0,394,90,1,0,0,0,395,396,5,60,0,0,396,
		92,1,0,0,0,397,398,5,60,0,0,398,399,5,61,0,0,399,94,1,0,0,0,400,401,5,
		62,0,0,401,96,1,0,0,0,402,403,5,62,0,0,403,404,5,61,0,0,404,98,1,0,0,0,
		405,406,5,61,0,0,406,407,5,61,0,0,407,100,1,0,0,0,408,409,5,33,0,0,409,
		410,5,61,0,0,410,102,1,0,0,0,411,412,5,61,0,0,412,104,1,0,0,0,413,414,
		5,43,0,0,414,415,5,61,0,0,415,106,1,0,0,0,416,417,5,45,0,0,417,418,5,61,
		0,0,418,108,1,0,0,0,419,420,5,42,0,0,420,421,5,61,0,0,421,110,1,0,0,0,
		422,423,5,92,0,0,423,424,5,61,0,0,424,112,1,0,0,0,425,426,5,37,0,0,426,
		427,5,61,0,0,427,114,1,0,0,0,428,429,5,126,0,0,429,116,1,0,0,0,430,431,
		5,91,0,0,431,118,1,0,0,0,432,433,5,93,0,0,433,120,1,0,0,0,434,436,7,3,
		0,0,435,434,1,0,0,0,436,437,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,
		439,1,0,0,0,439,440,6,60,0,0,440,122,1,0,0,0,441,443,5,13,0,0,442,441,
		1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,447,5,10,0,0,445,447,5,13,
		0,0,446,442,1,0,0,0,446,445,1,0,0,0,447,448,1,0,0,0,448,446,1,0,0,0,448,
		449,1,0,0,0,449,450,1,0,0,0,450,451,6,61,0,0,451,124,1,0,0,0,452,453,5,
		47,0,0,453,454,5,42,0,0,454,458,1,0,0,0,455,457,9,0,0,0,456,455,1,0,0,
		0,457,460,1,0,0,0,458,459,1,0,0,0,458,456,1,0,0,0,459,461,1,0,0,0,460,
		458,1,0,0,0,461,462,5,42,0,0,462,463,5,47,0,0,463,464,1,0,0,0,464,465,
		6,62,0,0,465,126,1,0,0,0,466,467,5,47,0,0,467,468,5,47,0,0,468,472,1,0,
		0,0,469,471,8,4,0,0,470,469,1,0,0,0,471,474,1,0,0,0,472,470,1,0,0,0,472,
		473,1,0,0,0,473,475,1,0,0,0,474,472,1,0,0,0,475,476,6,63,0,0,476,128,1,
		0,0,0,21,0,191,295,308,310,319,321,326,337,341,346,348,355,362,370,437,
		442,446,448,458,472,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
