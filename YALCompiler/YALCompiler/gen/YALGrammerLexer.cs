//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/rilar/Documents/GitHub/aau-p4-compiler/YALCompiler/YALCompiler/Grammar\YALGrammer.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class YALGrammerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, ARRAY_DEFINER=41, ASYNC=42, AWAIT=43, RETURN=44, TYPE=45, 
		ENUM=46, IN=47, OUT=48, STRING=49, ID=50, SIGNED_NUMBER=51, NEGATIVE_NUMBER=52, 
		POSITIVE_NUMBER=53, BOOLEAN=54, WHITESPACE=55, NEWLINE=56, COMMENT=57, 
		LINE_COMMENT=58;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "LOWERCASE", 
		"UPPERCASE", "DIGIT", "LETTER", "DOUBLE_QUOTATION_MARK", "SINGLE_QUOTATION_MARK", 
		"ARRAY_DEFINER", "ASYNC", "AWAIT", "RETURN", "TYPE", "ENUM", "IN", "OUT", 
		"STRING", "ID", "SIGNED_NUMBER", "NEGATIVE_NUMBER", "POSITIVE_NUMBER", 
		"BOOLEAN", "WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};


	public YALGrammerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public YALGrammerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "':'", "'('", "','", "')'", "'{'", "'}'", "'='", "'+='", 
		"'-='", "'*='", "'\\='", "'%='", "'++'", "'--'", "'~'", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'<<'", "'>>'", "'&'", "'^'", "'|'", "'!'", "'&&'", 
		"'||'", "'<'", "'<='", "'>'", "'>='", "'=='", "'!='", "'if'", "'else if'", 
		"'else'", "'while'", "'for'", null, "'async'", "'await'", "'return'", 
		null, "'enum'", "'in'", "'out'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "ARRAY_DEFINER", "ASYNC", "AWAIT", "RETURN", 
		"TYPE", "ENUM", "IN", "OUT", "STRING", "ID", "SIGNED_NUMBER", "NEGATIVE_NUMBER", 
		"POSITIVE_NUMBER", "BOOLEAN", "WHITESPACE", "NEWLINE", "COMMENT", "LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YALGrammer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static YALGrammerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,58,463,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
		7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
		7,63,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,
		8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,
		1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,
		1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
		1,25,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,30,
		1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,
		1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,
		1,38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,41,1,41,1,42,
		1,42,1,43,1,43,3,43,249,8,43,1,44,1,44,1,45,1,45,1,46,1,46,3,46,257,8,
		46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,
		48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
		50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,350,8,50,1,51,1,51,1,51,1,51,
		1,51,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,5,54,368,8,
		54,10,54,12,54,371,9,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,379,8,54,10,
		54,12,54,382,9,54,1,54,1,54,3,54,386,8,54,1,55,1,55,1,55,5,55,391,8,55,
		10,55,12,55,394,9,55,1,56,1,56,3,56,398,8,56,1,57,1,57,1,57,1,58,1,58,
		5,58,405,8,58,10,58,12,58,408,9,58,1,59,1,59,1,59,1,59,1,59,1,59,1,59,
		1,59,1,59,3,59,419,8,59,1,60,4,60,422,8,60,11,60,12,60,423,1,60,1,60,1,
		61,3,61,429,8,61,1,61,1,61,4,61,433,8,61,11,61,12,61,434,1,61,1,61,1,62,
		1,62,1,62,1,62,5,62,443,8,62,10,62,12,62,446,9,62,1,62,1,62,1,62,1,62,
		1,62,1,63,1,63,1,63,1,63,5,63,457,8,63,10,63,12,63,460,9,63,1,63,1,63,
		3,369,380,444,0,64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,
		23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
		47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,
		71,36,73,37,75,38,77,39,79,40,81,0,83,0,85,0,87,0,89,0,91,0,93,41,95,42,
		97,43,99,44,101,45,103,46,105,47,107,48,109,49,111,50,113,51,115,52,117,
		53,119,54,121,55,123,56,125,57,127,58,1,0,5,1,0,97,122,1,0,65,90,1,0,48,
		57,2,0,9,9,32,32,2,0,10,10,13,13,486,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
		0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
		1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
		0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,93,1,0,0,0,0,95,
		1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,
		0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,
		0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,
		0,0,0,0,127,1,0,0,0,1,129,1,0,0,0,3,131,1,0,0,0,5,133,1,0,0,0,7,135,1,
		0,0,0,9,137,1,0,0,0,11,139,1,0,0,0,13,141,1,0,0,0,15,143,1,0,0,0,17,145,
		1,0,0,0,19,148,1,0,0,0,21,151,1,0,0,0,23,154,1,0,0,0,25,157,1,0,0,0,27,
		160,1,0,0,0,29,163,1,0,0,0,31,166,1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,
		0,37,172,1,0,0,0,39,174,1,0,0,0,41,176,1,0,0,0,43,178,1,0,0,0,45,181,1,
		0,0,0,47,184,1,0,0,0,49,186,1,0,0,0,51,188,1,0,0,0,53,190,1,0,0,0,55,192,
		1,0,0,0,57,195,1,0,0,0,59,198,1,0,0,0,61,200,1,0,0,0,63,203,1,0,0,0,65,
		205,1,0,0,0,67,208,1,0,0,0,69,211,1,0,0,0,71,214,1,0,0,0,73,217,1,0,0,
		0,75,225,1,0,0,0,77,230,1,0,0,0,79,236,1,0,0,0,81,240,1,0,0,0,83,242,1,
		0,0,0,85,244,1,0,0,0,87,248,1,0,0,0,89,250,1,0,0,0,91,252,1,0,0,0,93,254,
		1,0,0,0,95,260,1,0,0,0,97,266,1,0,0,0,99,272,1,0,0,0,101,349,1,0,0,0,103,
		351,1,0,0,0,105,356,1,0,0,0,107,359,1,0,0,0,109,385,1,0,0,0,111,387,1,
		0,0,0,113,397,1,0,0,0,115,399,1,0,0,0,117,402,1,0,0,0,119,418,1,0,0,0,
		121,421,1,0,0,0,123,432,1,0,0,0,125,438,1,0,0,0,127,452,1,0,0,0,129,130,
		5,59,0,0,130,2,1,0,0,0,131,132,5,58,0,0,132,4,1,0,0,0,133,134,5,40,0,0,
		134,6,1,0,0,0,135,136,5,44,0,0,136,8,1,0,0,0,137,138,5,41,0,0,138,10,1,
		0,0,0,139,140,5,123,0,0,140,12,1,0,0,0,141,142,5,125,0,0,142,14,1,0,0,
		0,143,144,5,61,0,0,144,16,1,0,0,0,145,146,5,43,0,0,146,147,5,61,0,0,147,
		18,1,0,0,0,148,149,5,45,0,0,149,150,5,61,0,0,150,20,1,0,0,0,151,152,5,
		42,0,0,152,153,5,61,0,0,153,22,1,0,0,0,154,155,5,92,0,0,155,156,5,61,0,
		0,156,24,1,0,0,0,157,158,5,37,0,0,158,159,5,61,0,0,159,26,1,0,0,0,160,
		161,5,43,0,0,161,162,5,43,0,0,162,28,1,0,0,0,163,164,5,45,0,0,164,165,
		5,45,0,0,165,30,1,0,0,0,166,167,5,126,0,0,167,32,1,0,0,0,168,169,5,42,
		0,0,169,34,1,0,0,0,170,171,5,47,0,0,171,36,1,0,0,0,172,173,5,37,0,0,173,
		38,1,0,0,0,174,175,5,43,0,0,175,40,1,0,0,0,176,177,5,45,0,0,177,42,1,0,
		0,0,178,179,5,60,0,0,179,180,5,60,0,0,180,44,1,0,0,0,181,182,5,62,0,0,
		182,183,5,62,0,0,183,46,1,0,0,0,184,185,5,38,0,0,185,48,1,0,0,0,186,187,
		5,94,0,0,187,50,1,0,0,0,188,189,5,124,0,0,189,52,1,0,0,0,190,191,5,33,
		0,0,191,54,1,0,0,0,192,193,5,38,0,0,193,194,5,38,0,0,194,56,1,0,0,0,195,
		196,5,124,0,0,196,197,5,124,0,0,197,58,1,0,0,0,198,199,5,60,0,0,199,60,
		1,0,0,0,200,201,5,60,0,0,201,202,5,61,0,0,202,62,1,0,0,0,203,204,5,62,
		0,0,204,64,1,0,0,0,205,206,5,62,0,0,206,207,5,61,0,0,207,66,1,0,0,0,208,
		209,5,61,0,0,209,210,5,61,0,0,210,68,1,0,0,0,211,212,5,33,0,0,212,213,
		5,61,0,0,213,70,1,0,0,0,214,215,5,105,0,0,215,216,5,102,0,0,216,72,1,0,
		0,0,217,218,5,101,0,0,218,219,5,108,0,0,219,220,5,115,0,0,220,221,5,101,
		0,0,221,222,5,32,0,0,222,223,5,105,0,0,223,224,5,102,0,0,224,74,1,0,0,
		0,225,226,5,101,0,0,226,227,5,108,0,0,227,228,5,115,0,0,228,229,5,101,
		0,0,229,76,1,0,0,0,230,231,5,119,0,0,231,232,5,104,0,0,232,233,5,105,0,
		0,233,234,5,108,0,0,234,235,5,101,0,0,235,78,1,0,0,0,236,237,5,102,0,0,
		237,238,5,111,0,0,238,239,5,114,0,0,239,80,1,0,0,0,240,241,7,0,0,0,241,
		82,1,0,0,0,242,243,7,1,0,0,243,84,1,0,0,0,244,245,7,2,0,0,245,86,1,0,0,
		0,246,249,3,81,40,0,247,249,3,83,41,0,248,246,1,0,0,0,248,247,1,0,0,0,
		249,88,1,0,0,0,250,251,5,34,0,0,251,90,1,0,0,0,252,253,5,39,0,0,253,92,
		1,0,0,0,254,256,5,91,0,0,255,257,3,117,58,0,256,255,1,0,0,0,256,257,1,
		0,0,0,257,258,1,0,0,0,258,259,5,93,0,0,259,94,1,0,0,0,260,261,5,97,0,0,
		261,262,5,115,0,0,262,263,5,121,0,0,263,264,5,110,0,0,264,265,5,99,0,0,
		265,96,1,0,0,0,266,267,5,97,0,0,267,268,5,119,0,0,268,269,5,97,0,0,269,
		270,5,105,0,0,270,271,5,116,0,0,271,98,1,0,0,0,272,273,5,114,0,0,273,274,
		5,101,0,0,274,275,5,116,0,0,275,276,5,117,0,0,276,277,5,114,0,0,277,278,
		5,110,0,0,278,100,1,0,0,0,279,280,5,105,0,0,280,281,5,110,0,0,281,282,
		5,116,0,0,282,350,5,56,0,0,283,284,5,105,0,0,284,285,5,110,0,0,285,286,
		5,116,0,0,286,287,5,49,0,0,287,350,5,54,0,0,288,289,5,105,0,0,289,290,
		5,110,0,0,290,291,5,116,0,0,291,292,5,51,0,0,292,350,5,50,0,0,293,294,
		5,105,0,0,294,295,5,110,0,0,295,296,5,116,0,0,296,297,5,54,0,0,297,350,
		5,52,0,0,298,299,5,117,0,0,299,300,5,105,0,0,300,301,5,110,0,0,301,302,
		5,116,0,0,302,350,5,56,0,0,303,304,5,117,0,0,304,305,5,105,0,0,305,306,
		5,110,0,0,306,307,5,116,0,0,307,308,5,49,0,0,308,350,5,54,0,0,309,310,
		5,117,0,0,310,311,5,105,0,0,311,312,5,110,0,0,312,313,5,116,0,0,313,314,
		5,51,0,0,314,350,5,50,0,0,315,316,5,117,0,0,316,317,5,105,0,0,317,318,
		5,110,0,0,318,319,5,116,0,0,319,320,5,54,0,0,320,350,5,52,0,0,321,322,
		5,102,0,0,322,323,5,108,0,0,323,324,5,111,0,0,324,325,5,97,0,0,325,326,
		5,116,0,0,326,327,5,51,0,0,327,350,5,50,0,0,328,329,5,102,0,0,329,330,
		5,108,0,0,330,331,5,111,0,0,331,332,5,97,0,0,332,333,5,116,0,0,333,334,
		5,54,0,0,334,350,5,52,0,0,335,336,5,99,0,0,336,337,5,104,0,0,337,338,5,
		97,0,0,338,350,5,114,0,0,339,340,5,115,0,0,340,341,5,116,0,0,341,342,5,
		114,0,0,342,343,5,105,0,0,343,344,5,110,0,0,344,350,5,103,0,0,345,346,
		5,98,0,0,346,347,5,111,0,0,347,348,5,111,0,0,348,350,5,108,0,0,349,279,
		1,0,0,0,349,283,1,0,0,0,349,288,1,0,0,0,349,293,1,0,0,0,349,298,1,0,0,
		0,349,303,1,0,0,0,349,309,1,0,0,0,349,315,1,0,0,0,349,321,1,0,0,0,349,
		328,1,0,0,0,349,335,1,0,0,0,349,339,1,0,0,0,349,345,1,0,0,0,350,102,1,
		0,0,0,351,352,5,101,0,0,352,353,5,110,0,0,353,354,5,117,0,0,354,355,5,
		109,0,0,355,104,1,0,0,0,356,357,5,105,0,0,357,358,5,110,0,0,358,106,1,
		0,0,0,359,360,5,111,0,0,360,361,5,117,0,0,361,362,5,116,0,0,362,108,1,
		0,0,0,363,369,3,91,45,0,364,365,5,92,0,0,365,368,3,91,45,0,366,368,9,0,
		0,0,367,364,1,0,0,0,367,366,1,0,0,0,368,371,1,0,0,0,369,370,1,0,0,0,369,
		367,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,3,91,45,0,373,386,
		1,0,0,0,374,380,3,89,44,0,375,376,5,92,0,0,376,379,3,89,44,0,377,379,9,
		0,0,0,378,375,1,0,0,0,378,377,1,0,0,0,379,382,1,0,0,0,380,381,1,0,0,0,
		380,378,1,0,0,0,381,383,1,0,0,0,382,380,1,0,0,0,383,384,3,89,44,0,384,
		386,1,0,0,0,385,363,1,0,0,0,385,374,1,0,0,0,386,110,1,0,0,0,387,392,3,
		87,43,0,388,391,3,87,43,0,389,391,3,85,42,0,390,388,1,0,0,0,390,389,1,
		0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,0,0,0,393,112,1,0,0,0,
		394,392,1,0,0,0,395,398,3,115,57,0,396,398,3,117,58,0,397,395,1,0,0,0,
		397,396,1,0,0,0,398,114,1,0,0,0,399,400,5,45,0,0,400,401,3,117,58,0,401,
		116,1,0,0,0,402,406,3,85,42,0,403,405,3,85,42,0,404,403,1,0,0,0,405,408,
		1,0,0,0,406,404,1,0,0,0,406,407,1,0,0,0,407,118,1,0,0,0,408,406,1,0,0,
		0,409,410,5,116,0,0,410,411,5,114,0,0,411,412,5,117,0,0,412,419,5,101,
		0,0,413,414,5,102,0,0,414,415,5,97,0,0,415,416,5,108,0,0,416,417,5,115,
		0,0,417,419,5,101,0,0,418,409,1,0,0,0,418,413,1,0,0,0,419,120,1,0,0,0,
		420,422,7,3,0,0,421,420,1,0,0,0,422,423,1,0,0,0,423,421,1,0,0,0,423,424,
		1,0,0,0,424,425,1,0,0,0,425,426,6,60,0,0,426,122,1,0,0,0,427,429,5,13,
		0,0,428,427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,433,5,10,0,0,431,
		433,5,13,0,0,432,428,1,0,0,0,432,431,1,0,0,0,433,434,1,0,0,0,434,432,1,
		0,0,0,434,435,1,0,0,0,435,436,1,0,0,0,436,437,6,61,0,0,437,124,1,0,0,0,
		438,439,5,47,0,0,439,440,5,42,0,0,440,444,1,0,0,0,441,443,9,0,0,0,442,
		441,1,0,0,0,443,446,1,0,0,0,444,445,1,0,0,0,444,442,1,0,0,0,445,447,1,
		0,0,0,446,444,1,0,0,0,447,448,5,42,0,0,448,449,5,47,0,0,449,450,1,0,0,
		0,450,451,6,62,0,0,451,126,1,0,0,0,452,453,5,47,0,0,453,454,5,47,0,0,454,
		458,1,0,0,0,455,457,8,4,0,0,456,455,1,0,0,0,457,460,1,0,0,0,458,456,1,
		0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,458,1,0,0,0,461,462,6,63,0,0,
		462,128,1,0,0,0,20,0,248,256,349,367,369,378,380,385,390,392,397,406,418,
		423,428,432,434,444,458,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
