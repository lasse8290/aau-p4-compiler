#include <string>
#include <stdint.h>
#include <stdbool.h>
#include <Arduino.h>


typedef void (*Func)(void*);

template <typename I, typename O>
struct COMPILER_PARAMETERS {
  TaskHandle_t taskhandle; 
  I *input;
  O *output;
};

template <typename I>
void* COMPILER_INVOKE(I inputParameters, Func func, int isAwait) {
    TaskHandle_t taskhandle = xTaskGetCurrentTaskHandle();

    COMPILER_PARAMETERS<void, void> parameters;
    if (isAwait)
      parameters.taskhandle = taskhandle;
    parameters.input = &inputParameters;

    void* outputParameters;
    parameters.output = &outputParameters;

    if (isAwait) {
      xTaskCreate(func, NULL, 4096, &parameters, 10, &taskhandle);
      xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
    } else {
      func(&parameters);
    }

    return parameters.output;
}

void loop() {
  delay(10);
}

%%declarations%%

%%program%%