#include <string>
#include <stdint.h>
#include <stdbool.h>


typedef void (*Func)(void*);

template <typename I, typename O>
struct COMPILER_PARAMETERS {
  TaskHandle_t taskhandle; 
  I *input;
  O *output;
};

template <typename I>
void* COMPILER_INVOKE(I inputParameters, Func func, int isAsync, int isAwait) {
    TaskHandle_t taskhandle = xTaskGetCurrentTaskHandle();

    COMPILER_PARAMETERS<void, void> parameters;
    parameters.taskhandle = taskhandle;
    parameters.input = &inputParameters;

    void* outputParameters;
    parameters.output = &outputParameters;

    if (isAsync) {
      xTaskCreate(func, NULL, 4096, &parameters, 10, &taskhandle);
      if (isAwait) {
        xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
      }
    } else {
      func(&parameters);
    }

    return parameters.output;
}

void loop() {
  delay(10);
}

typedef struct COMPILER_INPUT_STRUCT_k {
  
} COMPILER_INPUT_STRUCT_k;
typedef struct COMPILER_OUTPUT_STRUCT_k {
  
} COMPILER_OUTPUT_STRUCT_k;
#define COMPILER_PARAMETERS_k COMPILER_PARAMETERS<COMPILER_INPUT_STRUCT_k, COMPILER_OUTPUT_STRUCT_k>


void k (void *pvParameters) {
    COMPILER_PARAMETERS_k *_COMPILER_PARAMETERS = (COMPILER_PARAMETERS_k*) pvParameters;
    

    xTaskNotify(_COMPILER_PARAMETERS->taskhandle, 0, eNoAction);
vTaskDelete(NULL);

return;

    
};
